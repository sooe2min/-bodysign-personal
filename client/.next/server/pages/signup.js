/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/signup";
exports.ids = ["pages/signup"];
exports.modules = {

/***/ "./node_modules/next/dist/client/normalize-trailing-slash.js":
/*!*******************************************************************!*\
  !*** ./node_modules/next/dist/client/normalize-trailing-slash.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.removePathTrailingSlash = removePathTrailingSlash;\nexports.normalizePathTrailingSlash = void 0;\n\nfunction removePathTrailingSlash(path) {\n  return path.endsWith('/') && path !== '/' ? path.slice(0, -1) : path;\n}\n\nconst normalizePathTrailingSlash =  false ? 0 : removePathTrailingSlash;\nexports.normalizePathTrailingSlash = normalizePathTrailingSlash;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9ub3JtYWxpemUtdHJhaWxpbmctc2xhc2guanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztBQUN6Q0csRUFBQUEsS0FBSyxFQUFFO0FBRGtDLENBQTdDO0FBR0FELCtCQUFBLEdBQWtDRSx1QkFBbEM7QUFDQUYsa0NBQUEsR0FBcUMsS0FBSyxDQUExQzs7QUFDQSxTQUFTRSx1QkFBVCxDQUFpQ0UsSUFBakMsRUFBdUM7QUFDbkMsU0FBT0EsSUFBSSxDQUFDQyxRQUFMLENBQWMsR0FBZCxLQUFzQkQsSUFBSSxLQUFLLEdBQS9CLEdBQXFDQSxJQUFJLENBQUNFLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBQyxDQUFmLENBQXJDLEdBQXlERixJQUFoRTtBQUNIOztBQUNELE1BQU1ELDBCQUEwQixHQUFHSSxNQUFBLEdBQXFDSCxDQUFyQyxHQVEvQkYsdUJBUko7QUFTQUYsa0NBQUEsR0FBcUNHLDBCQUFyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L25vcm1hbGl6ZS10cmFpbGluZy1zbGFzaC5qcz80YzJlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5yZW1vdmVQYXRoVHJhaWxpbmdTbGFzaCA9IHJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoO1xuZXhwb3J0cy5ub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaCA9IHZvaWQgMDtcbmZ1bmN0aW9uIHJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgICByZXR1cm4gcGF0aC5lbmRzV2l0aCgnLycpICYmIHBhdGggIT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmNvbnN0IG5vcm1hbGl6ZVBhdGhUcmFpbGluZ1NsYXNoID0gcHJvY2Vzcy5lbnYuX19ORVhUX1RSQUlMSU5HX1NMQVNIID8gKHBhdGgpPT57XG4gICAgaWYgKC9cXC5bXi9dK1xcLz8kLy50ZXN0KHBhdGgpKSB7XG4gICAgICAgIHJldHVybiByZW1vdmVQYXRoVHJhaWxpbmdTbGFzaChwYXRoKTtcbiAgICB9IGVsc2UgaWYgKHBhdGguZW5kc1dpdGgoJy8nKSkge1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcGF0aCArICcvJztcbiAgICB9XG59IDogcmVtb3ZlUGF0aFRyYWlsaW5nU2xhc2g7XG5leHBvcnRzLm5vcm1hbGl6ZVBhdGhUcmFpbGluZ1NsYXNoID0gbm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2g7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vcm1hbGl6ZS10cmFpbGluZy1zbGFzaC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJyZW1vdmVQYXRoVHJhaWxpbmdTbGFzaCIsIm5vcm1hbGl6ZVBhdGhUcmFpbGluZ1NsYXNoIiwicGF0aCIsImVuZHNXaXRoIiwic2xpY2UiLCJwcm9jZXNzIiwiZW52IiwiX19ORVhUX1RSQUlMSU5HX1NMQVNIIiwidGVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/normalize-trailing-slash.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/request-idle-callback.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/client/request-idle-callback.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.cancelIdleCallback = exports.requestIdleCallback = void 0;\n\nconst requestIdleCallback = typeof self !== 'undefined' && self.requestIdleCallback && self.requestIdleCallback.bind(window) || function (cb) {\n  let start = Date.now();\n  return setTimeout(function () {\n    cb({\n      didTimeout: false,\n      timeRemaining: function () {\n        return Math.max(0, 50 - (Date.now() - start));\n      }\n    });\n  }, 1);\n};\n\nexports.requestIdleCallback = requestIdleCallback;\n\nconst cancelIdleCallback = typeof self !== 'undefined' && self.cancelIdleCallback && self.cancelIdleCallback.bind(window) || function (id) {\n  return clearTimeout(id);\n};\n\nexports.cancelIdleCallback = cancelIdleCallback;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9yZXF1ZXN0LWlkbGUtY2FsbGJhY2suanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztBQUN6Q0csRUFBQUEsS0FBSyxFQUFFO0FBRGtDLENBQTdDO0FBR0FELDBCQUFBLEdBQTZCQSwyQkFBQSxHQUE4QixLQUFLLENBQWhFOztBQUNBLE1BQU1HLG1CQUFtQixHQUFHLE9BQU9DLElBQVAsS0FBZ0IsV0FBaEIsSUFBK0JBLElBQUksQ0FBQ0QsbUJBQXBDLElBQTJEQyxJQUFJLENBQUNELG1CQUFMLENBQXlCRSxJQUF6QixDQUE4QkMsTUFBOUIsQ0FBM0QsSUFBb0csVUFBU0MsRUFBVCxFQUFhO0FBQ3pJLE1BQUlDLEtBQUssR0FBR0MsSUFBSSxDQUFDQyxHQUFMLEVBQVo7QUFDQSxTQUFPQyxVQUFVLENBQUMsWUFBVztBQUN6QkosSUFBQUEsRUFBRSxDQUFDO0FBQ0NLLE1BQUFBLFVBQVUsRUFBRSxLQURiO0FBRUNDLE1BQUFBLGFBQWEsRUFBRSxZQUFXO0FBQ3RCLGVBQU9DLElBQUksQ0FBQ0MsR0FBTCxDQUFTLENBQVQsRUFBWSxNQUFNTixJQUFJLENBQUNDLEdBQUwsS0FBYUYsS0FBbkIsQ0FBWixDQUFQO0FBQ0g7QUFKRixLQUFELENBQUY7QUFNSCxHQVBnQixFQU9kLENBUGMsQ0FBakI7QUFRSCxDQVZEOztBQVdBUiwyQkFBQSxHQUE4QkcsbUJBQTlCOztBQUNBLE1BQU1ELGtCQUFrQixHQUFHLE9BQU9FLElBQVAsS0FBZ0IsV0FBaEIsSUFBK0JBLElBQUksQ0FBQ0Ysa0JBQXBDLElBQTBERSxJQUFJLENBQUNGLGtCQUFMLENBQXdCRyxJQUF4QixDQUE2QkMsTUFBN0IsQ0FBMUQsSUFBa0csVUFBU1UsRUFBVCxFQUFhO0FBQ3RJLFNBQU9DLFlBQVksQ0FBQ0QsRUFBRCxDQUFuQjtBQUNILENBRkQ7O0FBR0FoQiwwQkFBQSxHQUE2QkUsa0JBQTdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xpZW50Ly4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvcmVxdWVzdC1pZGxlLWNhbGxiYWNrLmpzPzFlMjAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNhbmNlbElkbGVDYWxsYmFjayA9IGV4cG9ydHMucmVxdWVzdElkbGVDYWxsYmFjayA9IHZvaWQgMDtcbmNvbnN0IHJlcXVlc3RJZGxlQ2FsbGJhY2sgPSB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5yZXF1ZXN0SWRsZUNhbGxiYWNrICYmIHNlbGYucmVxdWVzdElkbGVDYWxsYmFjay5iaW5kKHdpbmRvdykgfHwgZnVuY3Rpb24oY2IpIHtcbiAgICBsZXQgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBjYih7XG4gICAgICAgICAgICBkaWRUaW1lb3V0OiBmYWxzZSxcbiAgICAgICAgICAgIHRpbWVSZW1haW5pbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLm1heCgwLCA1MCAtIChEYXRlLm5vdygpIC0gc3RhcnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSwgMSk7XG59O1xuZXhwb3J0cy5yZXF1ZXN0SWRsZUNhbGxiYWNrID0gcmVxdWVzdElkbGVDYWxsYmFjaztcbmNvbnN0IGNhbmNlbElkbGVDYWxsYmFjayA9IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmLmNhbmNlbElkbGVDYWxsYmFjayAmJiBzZWxmLmNhbmNlbElkbGVDYWxsYmFjay5iaW5kKHdpbmRvdykgfHwgZnVuY3Rpb24oaWQpIHtcbiAgICByZXR1cm4gY2xlYXJUaW1lb3V0KGlkKTtcbn07XG5leHBvcnRzLmNhbmNlbElkbGVDYWxsYmFjayA9IGNhbmNlbElkbGVDYWxsYmFjaztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVxdWVzdC1pZGxlLWNhbGxiYWNrLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNhbmNlbElkbGVDYWxsYmFjayIsInJlcXVlc3RJZGxlQ2FsbGJhY2siLCJzZWxmIiwiYmluZCIsIndpbmRvdyIsImNiIiwic3RhcnQiLCJEYXRlIiwibm93Iiwic2V0VGltZW91dCIsImRpZFRpbWVvdXQiLCJ0aW1lUmVtYWluaW5nIiwiTWF0aCIsIm1heCIsImlkIiwiY2xlYXJUaW1lb3V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/request-idle-callback.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/route-loader.js":
/*!*******************************************************!*\
  !*** ./node_modules/next/dist/client/route-loader.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.markAssetError = markAssetError;\nexports.isAssetError = isAssetError;\nexports.getClientBuildManifest = getClientBuildManifest;\nexports.getMiddlewareManifest = getMiddlewareManifest;\nexports.createRouteLoader = createRouteLoader;\n\nvar _getAssetPathFromRoute = _interopRequireDefault(__webpack_require__(/*! ../shared/lib/router/utils/get-asset-path-from-route */ \"../shared/lib/router/utils/get-asset-path-from-route\"));\n\nvar _requestIdleCallback = __webpack_require__(/*! ./request-idle-callback */ \"./node_modules/next/dist/client/request-idle-callback.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // 3.8s was arbitrarily chosen as it's what https://web.dev/interactive\n// considers as \"Good\" time-to-interactive. We must assume something went\n// wrong beyond this point, and then fall-back to a full page transition to\n// show the user something of value.\n\n\nconst MS_MAX_IDLE_DELAY = 3800;\n\nfunction withFuture(key, map, generator) {\n  let entry = map.get(key);\n\n  if (entry) {\n    if ('future' in entry) {\n      return entry.future;\n    }\n\n    return Promise.resolve(entry);\n  }\n\n  let resolver;\n  const prom = new Promise(resolve => {\n    resolver = resolve;\n  });\n  map.set(key, entry = {\n    resolve: resolver,\n    future: prom\n  });\n  return generator ? generator() // eslint-disable-next-line no-sequences\n  .then(value => (resolver(value), value)).catch(err => {\n    map.delete(key);\n    throw err;\n  }) : prom;\n}\n\nfunction hasPrefetch(link) {\n  try {\n    link = document.createElement('link');\n    return (// detect IE11 since it supports prefetch but isn't detected\n      // with relList.support\n      !!window.MSInputMethodContext && !!document.documentMode || link.relList.supports('prefetch')\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\nconst canPrefetch = hasPrefetch();\n\nfunction prefetchViaDom(href, as, link) {\n  return new Promise((res, rej) => {\n    const selector = `\n      link[rel=\"prefetch\"][href^=\"${href}\"],\n      link[rel=\"preload\"][href^=\"${href}\"],\n      script[src^=\"${href}\"]`;\n\n    if (document.querySelector(selector)) {\n      return res();\n    }\n\n    link = document.createElement('link'); // The order of property assignment here is intentional:\n\n    if (as) link.as = as;\n    link.rel = `prefetch`;\n    link.crossOrigin = undefined;\n    link.onload = res;\n    link.onerror = rej; // `href` should always be last:\n\n    link.href = href;\n    document.head.appendChild(link);\n  });\n}\n\nconst ASSET_LOAD_ERROR = Symbol('ASSET_LOAD_ERROR');\n\nfunction markAssetError(err) {\n  return Object.defineProperty(err, ASSET_LOAD_ERROR, {});\n}\n\nfunction isAssetError(err) {\n  return err && ASSET_LOAD_ERROR in err;\n}\n\nfunction appendScript(src, script) {\n  return new Promise((resolve, reject) => {\n    script = document.createElement('script'); // The order of property assignment here is intentional.\n    // 1. Setup success/failure hooks in case the browser synchronously\n    //    executes when `src` is set.\n\n    script.onload = resolve;\n\n    script.onerror = () => reject(markAssetError(new Error(`Failed to load script: ${src}`))); // 2. Configure the cross-origin attribute before setting `src` in case the\n    //    browser begins to fetch.\n\n\n    script.crossOrigin = undefined; // 3. Finally, set the source and inject into the DOM in case the child\n    //    must be appended for fetching to start.\n\n    script.src = src;\n    document.body.appendChild(script);\n  });\n} // We wait for pages to be built in dev before we start the route transition\n// timeout to prevent an un-necessary hard navigation in development.\n\n\nlet devBuildPromise; // Resolve a promise that times out after given amount of milliseconds.\n\nfunction resolvePromiseWithTimeout(p, ms, err) {\n  return new Promise((resolve, reject) => {\n    let cancelled = false;\n    p.then(r => {\n      // Resolved, cancel the timeout\n      cancelled = true;\n      resolve(r);\n    }).catch(reject); // We wrap these checks separately for better dead-code elimination in\n    // production bundles.\n\n    if (true) {\n      (devBuildPromise || Promise.resolve()).then(() => {\n        (0, _requestIdleCallback).requestIdleCallback(() => setTimeout(() => {\n          if (!cancelled) {\n            reject(err);\n          }\n        }, ms));\n      });\n    }\n\n    if (false) {}\n  });\n}\n\nfunction getClientBuildManifest() {\n  if (self.__BUILD_MANIFEST) {\n    return Promise.resolve(self.__BUILD_MANIFEST);\n  }\n\n  const onBuildManifest = new Promise(resolve => {\n    // Mandatory because this is not concurrent safe:\n    const cb = self.__BUILD_MANIFEST_CB;\n\n    self.__BUILD_MANIFEST_CB = () => {\n      resolve(self.__BUILD_MANIFEST);\n      cb && cb();\n    };\n  });\n  return resolvePromiseWithTimeout(onBuildManifest, MS_MAX_IDLE_DELAY, markAssetError(new Error('Failed to load client build manifest')));\n}\n\nfunction getMiddlewareManifest() {\n  if (self.__MIDDLEWARE_MANIFEST) {\n    return Promise.resolve(self.__MIDDLEWARE_MANIFEST);\n  }\n\n  const onMiddlewareManifest = new Promise(resolve => {\n    const cb = self.__MIDDLEWARE_MANIFEST_CB;\n\n    self.__MIDDLEWARE_MANIFEST_CB = () => {\n      resolve(self.__MIDDLEWARE_MANIFEST);\n      cb && cb();\n    };\n  });\n  return resolvePromiseWithTimeout(onMiddlewareManifest, MS_MAX_IDLE_DELAY, markAssetError(new Error('Failed to load client middleware manifest')));\n}\n\nfunction getFilesForRoute(assetPrefix, route) {\n  if (true) {\n    return Promise.resolve({\n      scripts: [assetPrefix + '/_next/static/chunks/pages' + encodeURI((0, _getAssetPathFromRoute).default(route, '.js'))],\n      // Styles are handled by `style-loader` in development:\n      css: []\n    });\n  }\n\n  return getClientBuildManifest().then(manifest => {\n    if (!(route in manifest)) {\n      throw markAssetError(new Error(`Failed to lookup route: ${route}`));\n    }\n\n    const allFiles = manifest[route].map(entry => assetPrefix + '/_next/' + encodeURI(entry));\n    return {\n      scripts: allFiles.filter(v => v.endsWith('.js')),\n      css: allFiles.filter(v => v.endsWith('.css'))\n    };\n  });\n}\n\nfunction createRouteLoader(assetPrefix) {\n  const entrypoints = new Map();\n  const loadedScripts = new Map();\n  const styleSheets = new Map();\n  const routes = new Map();\n\n  function maybeExecuteScript(src) {\n    // With HMR we might need to \"reload\" scripts when they are\n    // disposed and readded. Executing scripts twice has no functional\n    // differences\n    if (false) {} else {\n      return appendScript(src);\n    }\n  }\n\n  function fetchStyleSheet(href) {\n    let prom = styleSheets.get(href);\n\n    if (prom) {\n      return prom;\n    }\n\n    styleSheets.set(href, prom = fetch(href).then(res => {\n      if (!res.ok) {\n        throw new Error(`Failed to load stylesheet: ${href}`);\n      }\n\n      return res.text().then(text => ({\n        href: href,\n        content: text\n      }));\n    }).catch(err => {\n      throw markAssetError(err);\n    }));\n    return prom;\n  }\n\n  return {\n    whenEntrypoint(route) {\n      return withFuture(route, entrypoints);\n    },\n\n    onEntrypoint(route, execute) {\n      (execute ? Promise.resolve().then(() => execute()).then(exports => ({\n        component: exports && exports.default || exports,\n        exports: exports\n      }), err => ({\n        error: err\n      })) : Promise.resolve(undefined)).then(input => {\n        const old = entrypoints.get(route);\n\n        if (old && 'resolve' in old) {\n          if (input) {\n            entrypoints.set(route, input);\n            old.resolve(input);\n          }\n        } else {\n          if (input) {\n            entrypoints.set(route, input);\n          } else {\n            entrypoints.delete(route);\n          } // when this entrypoint has been resolved before\n          // the route is outdated and we want to invalidate\n          // this cache entry\n\n\n          routes.delete(route);\n        }\n      });\n    },\n\n    loadRoute(route, prefetch) {\n      return withFuture(route, routes, () => {\n        const routeFilesPromise = getFilesForRoute(assetPrefix, route).then(({\n          scripts,\n          css\n        }) => {\n          return Promise.all([entrypoints.has(route) ? [] : Promise.all(scripts.map(maybeExecuteScript)), Promise.all(css.map(fetchStyleSheet))]);\n        }).then(res => {\n          return this.whenEntrypoint(route).then(entrypoint => ({\n            entrypoint,\n            styles: res[1]\n          }));\n        });\n\n        if (true) {\n          devBuildPromise = new Promise(resolve => {\n            if (routeFilesPromise) {\n              return routeFilesPromise.finally(() => {\n                resolve();\n              });\n            }\n          });\n        }\n\n        return resolvePromiseWithTimeout(routeFilesPromise, MS_MAX_IDLE_DELAY, markAssetError(new Error(`Route did not complete loading: ${route}`))).then(({\n          entrypoint,\n          styles\n        }) => {\n          const res = Object.assign({\n            styles: styles\n          }, entrypoint);\n          return 'error' in entrypoint ? entrypoint : res;\n        }).catch(err => {\n          if (prefetch) {\n            // we don't want to cache errors during prefetch\n            throw err;\n          }\n\n          return {\n            error: err\n          };\n        });\n      });\n    },\n\n    prefetch(route) {\n      // https://github.com/GoogleChromeLabs/quicklink/blob/453a661fa1fa940e2d2e044452398e38c67a98fb/src/index.mjs#L115-L118\n      // License: Apache 2.0\n      let cn;\n\n      if (cn = navigator.connection) {\n        // Don't prefetch if using 2G or if Save-Data is enabled.\n        if (cn.saveData || /2g/.test(cn.effectiveType)) return Promise.resolve();\n      }\n\n      return getFilesForRoute(assetPrefix, route).then(output => Promise.all(canPrefetch ? output.scripts.map(script => prefetchViaDom(script, 'script')) : [])).then(() => {\n        (0, _requestIdleCallback).requestIdleCallback(() => this.loadRoute(route, true).catch(() => {}));\n      }).catch( // swallow prefetch errors\n      () => {});\n    }\n\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/route-loader.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/router.js":
/*!*************************************************!*\
  !*** ./node_modules/next/dist/client/router.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nObject.defineProperty(exports, \"Router\", ({\n  enumerable: true,\n  get: function () {\n    return _router.default;\n  }\n}));\nObject.defineProperty(exports, \"withRouter\", ({\n  enumerable: true,\n  get: function () {\n    return _withRouter.default;\n  }\n}));\nexports.useRouter = useRouter;\nexports.createRouter = createRouter;\nexports.makePublicRouterInstance = makePublicRouterInstance;\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"react\"));\n\nvar _router = _interopRequireDefault(__webpack_require__(/*! ../shared/lib/router/router */ \"./node_modules/next/dist/shared/lib/router/router.js\"));\n\nvar _routerContext = __webpack_require__(/*! ../shared/lib/router-context */ \"../shared/lib/router-context\");\n\nvar _isError = _interopRequireDefault(__webpack_require__(/*! ../lib/is-error */ \"./node_modules/next/dist/lib/is-error.js\"));\n\nvar _withRouter = _interopRequireDefault(__webpack_require__(/*! ./with-router */ \"./node_modules/next/dist/client/with-router.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst singletonRouter = {\n  router: null,\n  readyCallbacks: [],\n\n  ready(cb) {\n    if (this.router) return cb();\n\n    if (false) {}\n  }\n\n}; // Create public properties and methods of the router in the singletonRouter\n\nconst urlPropertyFields = ['pathname', 'route', 'query', 'asPath', 'components', 'isFallback', 'basePath', 'locale', 'locales', 'defaultLocale', 'isReady', 'isPreview', 'isLocaleDomain', 'domainLocales'];\nconst routerEvents = ['routeChangeStart', 'beforeHistoryChange', 'routeChangeComplete', 'routeChangeError', 'hashChangeStart', 'hashChangeComplete'];\nconst coreMethodFields = ['push', 'replace', 'reload', 'back', 'prefetch', 'beforePopState']; // Events is a static property on the router, the router doesn't have to be initialized to use it\n\nObject.defineProperty(singletonRouter, 'events', {\n  get() {\n    return _router.default.events;\n  }\n\n});\nurlPropertyFields.forEach(field => {\n  // Here we need to use Object.defineProperty because we need to return\n  // the property assigned to the actual router\n  // The value might get changed as we change routes and this is the\n  // proper way to access it\n  Object.defineProperty(singletonRouter, field, {\n    get() {\n      const router = getRouter();\n      return router[field];\n    }\n\n  });\n});\ncoreMethodFields.forEach(field => {\n  singletonRouter[field] = (...args) => {\n    const router = getRouter();\n    return router[field](...args);\n  };\n});\nrouterEvents.forEach(event => {\n  singletonRouter.ready(() => {\n    _router.default.events.on(event, (...args) => {\n      const eventField = `on${event.charAt(0).toUpperCase()}${event.substring(1)}`;\n      const _singletonRouter = singletonRouter;\n\n      if (_singletonRouter[eventField]) {\n        try {\n          _singletonRouter[eventField](...args);\n        } catch (err) {\n          console.error(`Error when running the Router event: ${eventField}`);\n          console.error((0, _isError).default(err) ? `${err.message}\\n${err.stack}` : err + '');\n        }\n      }\n    });\n  });\n});\n\nfunction getRouter() {\n  if (!singletonRouter.router) {\n    const message = 'No router instance found.\\n' + 'You should only use \"next/router\" on the client side of your app.\\n';\n    throw new Error(message);\n  }\n\n  return singletonRouter.router;\n}\n\nvar _default = singletonRouter;\nexports[\"default\"] = _default;\n\nfunction useRouter() {\n  return _react.default.useContext(_routerContext.RouterContext);\n}\n\nfunction createRouter(...args) {\n  singletonRouter.router = new _router.default(...args);\n  singletonRouter.readyCallbacks.forEach(cb => cb());\n  singletonRouter.readyCallbacks = [];\n  return singletonRouter.router;\n}\n\nfunction makePublicRouterInstance(router) {\n  const scopedRouter = router;\n  const instance = {};\n\n  for (const property of urlPropertyFields) {\n    if (typeof scopedRouter[property] === 'object') {\n      instance[property] = Object.assign(Array.isArray(scopedRouter[property]) ? [] : {}, scopedRouter[property]) // makes sure query is not stateful\n      ;\n      continue;\n    }\n\n    instance[property] = scopedRouter[property];\n  } // Events is a static property on the router, the router doesn't have to be initialized to use it\n\n\n  instance.events = _router.default.events;\n  coreMethodFields.forEach(field => {\n    instance[field] = (...args) => {\n      return scopedRouter[field](...args);\n    };\n  });\n  return instance;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/router.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/with-router.js":
/*!******************************************************!*\
  !*** ./node_modules/next/dist/client/with-router.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = withRouter;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"react\"));\n\nvar _router = __webpack_require__(/*! ./router */ \"./node_modules/next/dist/client/router.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction withRouter(ComposedComponent) {\n  function WithRouterWrapper(props) {\n    return /*#__PURE__*/_react.default.createElement(ComposedComponent, Object.assign({\n      router: (0, _router).useRouter()\n    }, props));\n  }\n\n  WithRouterWrapper.getInitialProps = ComposedComponent.getInitialProps;\n  WithRouterWrapper.origGetInitialProps = ComposedComponent.origGetInitialProps;\n\n  if (true) {\n    const name = ComposedComponent.displayName || ComposedComponent.name || 'Unknown';\n    WithRouterWrapper.displayName = `withRouter(${name})`;\n  }\n\n  return WithRouterWrapper;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC93aXRoLXJvdXRlci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0FBQ3pDRyxFQUFBQSxLQUFLLEVBQUU7QUFEa0MsQ0FBN0M7QUFHQUQsa0JBQUEsR0FBa0JHLFVBQWxCOztBQUNBLElBQUlDLE1BQU0sR0FBR0Msc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsb0JBQUQsQ0FBUixDQUFuQzs7QUFDQSxJQUFJQyxPQUFPLEdBQUdELG1CQUFPLENBQUMsMkRBQUQsQ0FBckI7O0FBQ0EsU0FBU0Qsc0JBQVQsQ0FBZ0NHLEdBQWhDLEVBQXFDO0FBQ2pDLFNBQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QjtBQUNqQ04sSUFBQUEsT0FBTyxFQUFFTTtBQUR3QixHQUFyQztBQUdIOztBQUNELFNBQVNMLFVBQVQsQ0FBb0JPLGlCQUFwQixFQUF1QztBQUNuQyxXQUFTQyxpQkFBVCxDQUEyQkMsS0FBM0IsRUFBa0M7QUFDOUIsV0FBTyxhQUFjUixNQUFNLENBQUNGLE9BQVAsQ0FBZVcsYUFBZixDQUE2QkgsaUJBQTdCLEVBQWdEWixNQUFNLENBQUNnQixNQUFQLENBQWM7QUFDL0VDLE1BQUFBLE1BQU0sRUFBRSxDQUFDLEdBQUdSLE9BQUosRUFBYVMsU0FBYjtBQUR1RSxLQUFkLEVBRWxFSixLQUZrRSxDQUFoRCxDQUFyQjtBQUdIOztBQUNERCxFQUFBQSxpQkFBaUIsQ0FBQ00sZUFBbEIsR0FBb0NQLGlCQUFpQixDQUFDTyxlQUF0RDtBQUNBTixFQUFBQSxpQkFBaUIsQ0FBQ08sbUJBQWxCLEdBQXdDUixpQkFBaUIsQ0FBQ1EsbUJBQTFEOztBQUNBLFlBQTJDO0FBQ3ZDLFVBQU1DLElBQUksR0FBR1QsaUJBQWlCLENBQUNVLFdBQWxCLElBQWlDVixpQkFBaUIsQ0FBQ1MsSUFBbkQsSUFBMkQsU0FBeEU7QUFDQVIsSUFBQUEsaUJBQWlCLENBQUNTLFdBQWxCLEdBQWlDLGNBQWFELElBQUssR0FBbkQ7QUFDSDs7QUFDRCxTQUFPUixpQkFBUDtBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xpZW50Ly4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvd2l0aC1yb3V0ZXIuanM/YWM3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHdpdGhSb3V0ZXI7XG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9yb3V0ZXIgPSByZXF1aXJlKFwiLi9yb3V0ZXJcIik7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG59XG5mdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvc2VkQ29tcG9uZW50KSB7XG4gICAgZnVuY3Rpb24gV2l0aFJvdXRlcldyYXBwZXIocHJvcHMpIHtcbiAgICAgICAgcmV0dXJuKC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb3NlZENvbXBvbmVudCwgT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICByb3V0ZXI6ICgwLCBfcm91dGVyKS51c2VSb3V0ZXIoKVxuICAgICAgICB9LCBwcm9wcykpKTtcbiAgICB9XG4gICAgV2l0aFJvdXRlcldyYXBwZXIuZ2V0SW5pdGlhbFByb3BzID0gQ29tcG9zZWRDb21wb25lbnQuZ2V0SW5pdGlhbFByb3BzO1xuICAgIFdpdGhSb3V0ZXJXcmFwcGVyLm9yaWdHZXRJbml0aWFsUHJvcHMgPSBDb21wb3NlZENvbXBvbmVudC5vcmlnR2V0SW5pdGlhbFByb3BzO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBDb21wb3NlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb3NlZENvbXBvbmVudC5uYW1lIHx8ICdVbmtub3duJztcbiAgICAgICAgV2l0aFJvdXRlcldyYXBwZXIuZGlzcGxheU5hbWUgPSBgd2l0aFJvdXRlcigke25hbWV9KWA7XG4gICAgfVxuICAgIHJldHVybiBXaXRoUm91dGVyV3JhcHBlcjtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2l0aC1yb3V0ZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIndpdGhSb3V0ZXIiLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yb3V0ZXIiLCJvYmoiLCJfX2VzTW9kdWxlIiwiQ29tcG9zZWRDb21wb25lbnQiLCJXaXRoUm91dGVyV3JhcHBlciIsInByb3BzIiwiY3JlYXRlRWxlbWVudCIsImFzc2lnbiIsInJvdXRlciIsInVzZVJvdXRlciIsImdldEluaXRpYWxQcm9wcyIsIm9yaWdHZXRJbml0aWFsUHJvcHMiLCJuYW1lIiwiZGlzcGxheU5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/with-router.js\n");

/***/ }),

/***/ "./node_modules/next/dist/shared/lib/router/router.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/router.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.getDomainLocale = getDomainLocale;\nexports.addLocale = addLocale;\nexports.delLocale = delLocale;\nexports.hasBasePath = hasBasePath;\nexports.addBasePath = addBasePath;\nexports.delBasePath = delBasePath;\nexports.isLocalURL = isLocalURL;\nexports.interpolateAs = interpolateAs;\nexports.resolveHref = resolveHref;\nexports[\"default\"] = void 0;\n\nvar _normalizeTrailingSlash = __webpack_require__(/*! ../../../client/normalize-trailing-slash */ \"./node_modules/next/dist/client/normalize-trailing-slash.js\");\n\nvar _routeLoader = __webpack_require__(/*! ../../../client/route-loader */ \"./node_modules/next/dist/client/route-loader.js\");\n\nvar _isError = _interopRequireDefault(__webpack_require__(/*! ../../../lib/is-error */ \"./node_modules/next/dist/lib/is-error.js\"));\n\nvar _denormalizePagePath = __webpack_require__(/*! ../../../server/denormalize-page-path */ \"../../../server/denormalize-page-path\");\n\nvar _normalizeLocalePath = __webpack_require__(/*! ../i18n/normalize-locale-path */ \"../i18n/normalize-locale-path\");\n\nvar _mitt = _interopRequireDefault(__webpack_require__(/*! ../mitt */ \"../mitt\"));\n\nvar _utils = __webpack_require__(/*! ../utils */ \"../shared/lib/utils\");\n\nvar _isDynamic = __webpack_require__(/*! ./utils/is-dynamic */ \"./utils/is-dynamic\");\n\nvar _parseRelativeUrl = __webpack_require__(/*! ./utils/parse-relative-url */ \"./utils/parse-relative-url\");\n\nvar _querystring = __webpack_require__(/*! ./utils/querystring */ \"./utils/querystring\");\n\nvar _resolveRewrites = _interopRequireDefault(__webpack_require__(/*! ./utils/resolve-rewrites */ \"./utils/resolve-rewrites\"));\n\nvar _routeMatcher = __webpack_require__(/*! ./utils/route-matcher */ \"./utils/route-matcher\");\n\nvar _routeRegex = __webpack_require__(/*! ./utils/route-regex */ \"./utils/route-regex\");\n\nvar _getMiddlewareRegex = __webpack_require__(/*! ./utils/get-middleware-regex */ \"./utils/get-middleware-regex\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nlet detectDomainLocale;\n\nif (false) {}\n\nconst basePath =  false || '';\n\nfunction buildCancellationError() {\n  return Object.assign(new Error('Route Cancelled'), {\n    cancelled: true\n  });\n}\n\nfunction addPathPrefix(path, prefix) {\n  if (!path.startsWith('/') || !prefix) {\n    return path;\n  }\n\n  const pathname = pathNoQueryHash(path);\n  return (0, _normalizeTrailingSlash).normalizePathTrailingSlash(`${prefix}${pathname}`) + path.substr(pathname.length);\n}\n\nfunction getDomainLocale(path, locale, locales, domainLocales) {\n  if (false) {} else {\n    return false;\n  }\n}\n\nfunction addLocale(path, locale, defaultLocale) {\n  if (false) {}\n\n  return path;\n}\n\nfunction delLocale(path, locale) {\n  if (false) {}\n\n  return path;\n}\n\nfunction pathNoQueryHash(path) {\n  const queryIndex = path.indexOf('?');\n  const hashIndex = path.indexOf('#');\n\n  if (queryIndex > -1 || hashIndex > -1) {\n    path = path.substring(0, queryIndex > -1 ? queryIndex : hashIndex);\n  }\n\n  return path;\n}\n\nfunction hasBasePath(path) {\n  path = pathNoQueryHash(path);\n  return path === basePath || path.startsWith(basePath + '/');\n}\n\nfunction addBasePath(path) {\n  // we only add the basepath on relative urls\n  return addPathPrefix(path, basePath);\n}\n\nfunction delBasePath(path) {\n  path = path.slice(basePath.length);\n  if (!path.startsWith('/')) path = `/${path}`;\n  return path;\n}\n\nfunction isLocalURL(url) {\n  // prevent a hydration mismatch on href for url with anchor refs\n  if (url.startsWith('/') || url.startsWith('#') || url.startsWith('?')) return true;\n\n  try {\n    // absolute urls can be local if they are on the same origin\n    const locationOrigin = (0, _utils).getLocationOrigin();\n    const resolved = new URL(url, locationOrigin);\n    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname);\n  } catch (_) {\n    return false;\n  }\n}\n\nfunction interpolateAs(route, asPathname, query) {\n  let interpolatedRoute = '';\n  const dynamicRegex = (0, _routeRegex).getRouteRegex(route);\n  const dynamicGroups = dynamicRegex.groups;\n  const dynamicMatches = // Try to match the dynamic route against the asPath\n  (asPathname !== route ? (0, _routeMatcher).getRouteMatcher(dynamicRegex)(asPathname) : '') || // Fall back to reading the values from the href\n  // TODO: should this take priority; also need to change in the router.\n  query;\n  interpolatedRoute = route;\n  const params = Object.keys(dynamicGroups);\n\n  if (!params.every(param => {\n    let value = dynamicMatches[param] || '';\n    const {\n      repeat,\n      optional\n    } = dynamicGroups[param]; // support single-level catch-all\n    // TODO: more robust handling for user-error (passing `/`)\n\n    let replaced = `[${repeat ? '...' : ''}${param}]`;\n\n    if (optional) {\n      replaced = `${!value ? '/' : ''}[${replaced}]`;\n    }\n\n    if (repeat && !Array.isArray(value)) value = [value];\n    return (optional || param in dynamicMatches) && (interpolatedRoute = interpolatedRoute.replace(replaced, repeat ? value.map( // these values should be fully encoded instead of just\n    // path delimiter escaped since they are being inserted\n    // into the URL and we expect URL encoded segments\n    // when parsing dynamic route params\n    segment => encodeURIComponent(segment)).join('/') : encodeURIComponent(value)) || '/');\n  })) {\n    interpolatedRoute = '' // did not satisfy all requirements\n    ; // n.b. We ignore this error because we handle warning for this case in\n    // development in the `<Link>` component directly.\n  }\n\n  return {\n    params,\n    result: interpolatedRoute\n  };\n}\n\nfunction omitParmsFromQuery(query, params) {\n  const filteredQuery = {};\n  Object.keys(query).forEach(key => {\n    if (!params.includes(key)) {\n      filteredQuery[key] = query[key];\n    }\n  });\n  return filteredQuery;\n}\n\nfunction resolveHref(router, href, resolveAs) {\n  // we use a dummy base url for relative urls\n  let base;\n  let urlAsString = typeof href === 'string' ? href : (0, _utils).formatWithValidation(href); // repeated slashes and backslashes in the URL are considered\n  // invalid and will never match a Next.js page/file\n\n  const urlProtoMatch = urlAsString.match(/^[a-zA-Z]{1,}:\\/\\//);\n  const urlAsStringNoProto = urlProtoMatch ? urlAsString.substr(urlProtoMatch[0].length) : urlAsString;\n  const urlParts = urlAsStringNoProto.split('?');\n\n  if ((urlParts[0] || '').match(/(\\/\\/|\\\\)/)) {\n    console.error(`Invalid href passed to next/router: ${urlAsString}, repeated forward-slashes (//) or backslashes \\\\ are not valid in the href`);\n    const normalizedUrl = (0, _utils).normalizeRepeatedSlashes(urlAsStringNoProto);\n    urlAsString = (urlProtoMatch ? urlProtoMatch[0] : '') + normalizedUrl;\n  } // Return because it cannot be routed by the Next.js router\n\n\n  if (!isLocalURL(urlAsString)) {\n    return resolveAs ? [urlAsString] : urlAsString;\n  }\n\n  try {\n    base = new URL(urlAsString.startsWith('#') ? router.asPath : router.pathname, 'http://n');\n  } catch (_) {\n    // fallback to / for invalid asPath values e.g. //\n    base = new URL('/', 'http://n');\n  }\n\n  try {\n    const finalUrl = new URL(urlAsString, base);\n    finalUrl.pathname = (0, _normalizeTrailingSlash).normalizePathTrailingSlash(finalUrl.pathname);\n    let interpolatedAs = '';\n\n    if ((0, _isDynamic).isDynamicRoute(finalUrl.pathname) && finalUrl.searchParams && resolveAs) {\n      const query = (0, _querystring).searchParamsToUrlQuery(finalUrl.searchParams);\n      const {\n        result,\n        params\n      } = interpolateAs(finalUrl.pathname, finalUrl.pathname, query);\n\n      if (result) {\n        interpolatedAs = (0, _utils).formatWithValidation({\n          pathname: result,\n          hash: finalUrl.hash,\n          query: omitParmsFromQuery(query, params)\n        });\n      }\n    } // if the origin didn't change, it means we received a relative href\n\n\n    const resolvedHref = finalUrl.origin === base.origin ? finalUrl.href.slice(finalUrl.origin.length) : finalUrl.href;\n    return resolveAs ? [resolvedHref, interpolatedAs || resolvedHref] : resolvedHref;\n  } catch (_1) {\n    return resolveAs ? [urlAsString] : urlAsString;\n  }\n}\n\nfunction stripOrigin(url) {\n  const origin = (0, _utils).getLocationOrigin();\n  return url.startsWith(origin) ? url.substring(origin.length) : url;\n}\n\nfunction prepareUrlAs(router, url, as) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  let [resolvedHref, resolvedAs] = resolveHref(router, url, true);\n  const origin = (0, _utils).getLocationOrigin();\n  const hrefHadOrigin = resolvedHref.startsWith(origin);\n  const asHadOrigin = resolvedAs && resolvedAs.startsWith(origin);\n  resolvedHref = stripOrigin(resolvedHref);\n  resolvedAs = resolvedAs ? stripOrigin(resolvedAs) : resolvedAs;\n  const preparedUrl = hrefHadOrigin ? resolvedHref : addBasePath(resolvedHref);\n  const preparedAs = as ? stripOrigin(resolveHref(router, as)) : resolvedAs || resolvedHref;\n  return {\n    url: preparedUrl,\n    as: asHadOrigin ? preparedAs : addBasePath(preparedAs)\n  };\n}\n\nfunction resolveDynamicRoute(pathname, pages) {\n  const cleanPathname = (0, _normalizeTrailingSlash).removePathTrailingSlash((0, _denormalizePagePath).denormalizePagePath(pathname));\n\n  if (cleanPathname === '/404' || cleanPathname === '/_error') {\n    return pathname;\n  } // handle resolving href for dynamic routes\n\n\n  if (!pages.includes(cleanPathname)) {\n    // eslint-disable-next-line array-callback-return\n    pages.some(page => {\n      if ((0, _isDynamic).isDynamicRoute(page) && (0, _routeRegex).getRouteRegex(page).re.test(cleanPathname)) {\n        pathname = page;\n        return true;\n      }\n    });\n  }\n\n  return (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname);\n}\n\nconst manualScrollRestoration =  false && 0;\nconst SSG_DATA_NOT_FOUND = Symbol('SSG_DATA_NOT_FOUND');\n\nfunction fetchRetry(url, attempts, opts) {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` won’t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: 'same-origin'\n  }).then(res => {\n    if (!res.ok) {\n      if (attempts > 1 && res.status >= 500) {\n        return fetchRetry(url, attempts - 1, opts);\n      }\n\n      if (res.status === 404) {\n        return res.json().then(data => {\n          if (data.notFound) {\n            return {\n              notFound: SSG_DATA_NOT_FOUND\n            };\n          }\n\n          throw new Error(`Failed to load static props`);\n        });\n      }\n\n      throw new Error(`Failed to load static props`);\n    }\n\n    return opts.text ? res.text() : res.json();\n  });\n}\n\nfunction fetchNextData(dataHref, isServerRender, text, inflightCache, persistCache) {\n  const {\n    href: cacheKey\n  } = new URL(dataHref, window.location.href);\n\n  if (inflightCache[cacheKey] !== undefined) {\n    return inflightCache[cacheKey];\n  }\n\n  return inflightCache[cacheKey] = fetchRetry(dataHref, isServerRender ? 3 : 1, {\n    text\n  }).catch(err => {\n    // We should only trigger a server-side transition if this was caused\n    // on a client-side transition. Otherwise, we'd get into an infinite\n    // loop.\n    if (!isServerRender) {\n      (0, _routeLoader).markAssetError(err);\n    }\n\n    throw err;\n  }).then(data => {\n    if (!persistCache || true) {\n      delete inflightCache[cacheKey];\n    }\n\n    return data;\n  }).catch(err => {\n    delete inflightCache[cacheKey];\n    throw err;\n  });\n}\n\nclass Router {\n  constructor(pathname, query, as, {\n    initialProps,\n    pageLoader,\n    App,\n    wrapApp,\n    Component,\n    err,\n    subscription,\n    isFallback,\n    locale,\n    locales,\n    defaultLocale,\n    domainLocales,\n    isPreview\n  }) {\n    // Static Data Cache\n    this.sdc = {}; // In-flight Server Data Requests, for deduping\n\n    this.sdr = {}; // In-flight middleware preflight requests\n\n    this.sde = {};\n    this._idx = 0;\n\n    this.onPopState = e => {\n      const state = e.state;\n\n      if (!state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        const {\n          pathname,\n          query\n        } = this;\n        this.changeState('replaceState', (0, _utils).formatWithValidation({\n          pathname: addBasePath(pathname),\n          query\n        }), (0, _utils).getURL());\n        return;\n      }\n\n      if (!state.__N) {\n        return;\n      }\n\n      let forcedScroll;\n      const {\n        url,\n        as,\n        options,\n        idx\n      } = state;\n\n      if (false) {}\n\n      this._idx = idx;\n      const {\n        pathname\n      } = (0, _parseRelativeUrl).parseRelativeUrl(url); // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n\n      if (this.isSsr && as === this.asPath && pathname === this.pathname) {\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n\n\n      if (this._bps && !this._bps(state)) {\n        return;\n      }\n\n      this.change('replaceState', url, as, Object.assign({}, options, {\n        shallow: options.shallow && this._shallow,\n        locale: options.locale || this.defaultLocale\n      }), forcedScroll);\n    }; // represents the current component key\n\n\n    this.route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname); // set up the component cache (by route keys)\n\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n\n    if (pathname !== '/_error') {\n      var ref;\n      this.components[this.route] = {\n        Component,\n        initial: true,\n        props: initialProps,\n        err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP,\n        __N_RSC: !!((ref = Component) === null || ref === void 0 ? void 0 : ref.__next_rsc__)\n      };\n    }\n\n    this.components['/_app'] = {\n      Component: App,\n      styleSheets: []\n    }; // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n\n    this.events = Router.events;\n    this.pageLoader = pageLoader;\n    this.pathname = pathname;\n    this.query = query; // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n\n    const autoExportDynamic = (0, _isDynamic).isDynamicRoute(pathname) && self.__NEXT_DATA__.autoExport;\n\n    this.asPath = autoExportDynamic ? pathname : as;\n    this.basePath = basePath;\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating\n    // back from external site\n\n    this.isSsr = true;\n    this.isFallback = isFallback;\n    this.isReady = !!(self.__NEXT_DATA__.gssp || self.__NEXT_DATA__.gip || self.__NEXT_DATA__.appGip && !self.__NEXT_DATA__.gsp || !autoExportDynamic && !self.location.search && !false);\n    this.isPreview = !!isPreview;\n    this.isLocaleDomain = false;\n\n    if (false) {}\n\n    if (false) {}\n  }\n\n  reload() {\n    window.location.reload();\n  }\n  /**\n  * Go back in history\n  */\n\n\n  back() {\n    window.history.back();\n  }\n  /**\n  * Performs a `pushState` with arguments\n  * @param url of the route\n  * @param as masks `url` for the browser\n  * @param options object you can define `shallow` and other options\n  */\n\n\n  push(url, as, options = {}) {\n    if (false) {}\n\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change('pushState', url, as, options);\n  }\n  /**\n  * Performs a `replaceState` with arguments\n  * @param url of the route\n  * @param as masks `url` for the browser\n  * @param options object you can define `shallow` and other options\n  */\n\n\n  replace(url, as, options = {}) {\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change('replaceState', url, as, options);\n  }\n\n  async change(method, url, as, options, forcedScroll) {\n    if (!isLocalURL(url)) {\n      window.location.href = url;\n      return false;\n    }\n\n    const shouldResolveHref = options._h || options._shouldResolveHref || pathNoQueryHash(url) === pathNoQueryHash(as); // for static pages with query params in the URL we delay\n    // marking the router ready until after the query is updated\n\n    if (options._h) {\n      this.isReady = true;\n    }\n\n    const prevLocale = this.locale;\n\n    if (false) { var ref; }\n\n    if (!options._h) {\n      this.isSsr = false;\n    } // marking route changes as a navigation start entry\n\n\n    if (_utils.ST) {\n      performance.mark('routeChange');\n    }\n\n    const {\n      shallow = false\n    } = options;\n    const routeProps = {\n      shallow\n    };\n\n    if (this._inFlightRoute) {\n      this.abortComponentLoad(this._inFlightRoute, routeProps);\n    }\n\n    as = addBasePath(addLocale(hasBasePath(as) ? delBasePath(as) : as, options.locale, this.defaultLocale));\n    const cleanedAs = delLocale(hasBasePath(as) ? delBasePath(as) : as, this.locale);\n    this._inFlightRoute = as;\n    let localeChange = prevLocale !== this.locale; // If the url change is only related to a hash change\n    // We should not proceed. We should only change the state.\n    // WARNING: `_h` is an internal option for handing Next.js client-side\n    // hydration. Your app should _never_ use this property. It may change at\n    // any time without notice.\n\n    if (!options._h && this.onlyAHashChange(cleanedAs) && !localeChange) {\n      this.asPath = cleanedAs;\n      Router.events.emit('hashChangeStart', as, routeProps); // TODO: do we need the resolved href when only a hash change?\n\n      this.changeState(method, url, as, options);\n      this.scrollToHash(cleanedAs);\n      this.notify(this.components[this.route], null);\n      Router.events.emit('hashChangeComplete', as, routeProps);\n      return true;\n    }\n\n    let parsed = (0, _parseRelativeUrl).parseRelativeUrl(url);\n    let {\n      pathname,\n      query\n    } = parsed; // The build manifest needs to be loaded before auto-static dynamic pages\n    // get their query parameters to allow ensuring they can be parsed properly\n    // when rewritten to\n\n    let pages, rewrites;\n\n    try {\n      [pages, {\n        __rewrites: rewrites\n      }] = await Promise.all([this.pageLoader.getPageList(), (0, _routeLoader).getClientBuildManifest(), this.pageLoader.getMiddlewareList()]);\n    } catch (err) {\n      // If we fail to resolve the page list or client-build manifest, we must\n      // do a server-side transition:\n      window.location.href = as;\n      return false;\n    } // If asked to change the current URL we should reload the current page\n    // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n    // We also need to set the method = replaceState always\n    // as this should not go into the history (That's how browsers work)\n    // We should compare the new asPath to the current asPath, not the url\n\n\n    if (!this.urlIsNew(cleanedAs) && !localeChange) {\n      method = 'replaceState';\n    } // we need to resolve the as value using rewrites for dynamic SSG\n    // pages to allow building the data URL correctly\n\n\n    let resolvedAs = as; // url and as should always be prefixed with basePath by this\n    // point by either next/link or router.push/replace so strip the\n    // basePath from the pathname to match the pages dir 1-to-1\n\n    pathname = pathname ? (0, _normalizeTrailingSlash).removePathTrailingSlash(delBasePath(pathname)) : pathname;\n\n    if (shouldResolveHref && pathname !== '/_error') {\n      options._shouldResolveHref = true;\n\n      if (false) {} else {\n        parsed.pathname = resolveDynamicRoute(pathname, pages);\n\n        if (parsed.pathname !== pathname) {\n          pathname = parsed.pathname;\n          parsed.pathname = addBasePath(pathname);\n          url = (0, _utils).formatWithValidation(parsed);\n        }\n      }\n    }\n\n    if (!isLocalURL(as)) {\n      if (true) {\n        throw new Error(`Invalid href: \"${url}\" and as: \"${as}\", received relative href and external as` + `\\nSee more info: https://nextjs.org/docs/messages/invalid-relative-url-external-as`);\n      }\n\n      window.location.href = as;\n      return false;\n    }\n\n    resolvedAs = delLocale(delBasePath(resolvedAs), this.locale);\n    const effect = await this._preflightRequest({\n      as,\n      cache: false,\n      pages,\n      pathname,\n      query\n    });\n\n    if (effect.type === 'rewrite') {\n      query = _objectSpread(_objectSpread({}, query), effect.parsedAs.query);\n      resolvedAs = effect.asPath;\n      pathname = effect.resolvedHref;\n      parsed.pathname = effect.resolvedHref;\n      url = (0, _utils).formatWithValidation(parsed);\n    } else if (effect.type === 'redirect' && effect.newAs) {\n      return this.change(method, effect.newUrl, effect.newAs, options);\n    } else if (effect.type === 'redirect' && effect.destination) {\n      window.location.href = effect.destination;\n      return new Promise(() => {});\n    } else if (effect.type === 'refresh') {\n      window.location.href = as;\n      return new Promise(() => {});\n    }\n\n    const route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname);\n\n    if ((0, _isDynamic).isDynamicRoute(route)) {\n      const parsedAs = (0, _parseRelativeUrl).parseRelativeUrl(resolvedAs);\n      const asPathname = parsedAs.pathname;\n      const routeRegex = (0, _routeRegex).getRouteRegex(route);\n      const routeMatch = (0, _routeMatcher).getRouteMatcher(routeRegex)(asPathname);\n      const shouldInterpolate = route === asPathname;\n      const interpolatedAs = shouldInterpolate ? interpolateAs(route, asPathname, query) : {};\n\n      if (!routeMatch || shouldInterpolate && !interpolatedAs.result) {\n        const missingParams = Object.keys(routeRegex.groups).filter(param => !query[param]);\n\n        if (missingParams.length > 0) {\n          if (true) {\n            console.warn(`${shouldInterpolate ? `Interpolating href` : `Mismatching \\`as\\` and \\`href\\``} failed to manually provide ` + `the params: ${missingParams.join(', ')} in the \\`href\\`'s \\`query\\``);\n          }\n\n          throw new Error((shouldInterpolate ? `The provided \\`href\\` (${url}) value is missing query values (${missingParams.join(', ')}) to be interpolated properly. ` : `The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). `) + `Read more: https://nextjs.org/docs/messages/${shouldInterpolate ? 'href-interpolation-failed' : 'incompatible-href-as'}`);\n        }\n      } else if (shouldInterpolate) {\n        as = (0, _utils).formatWithValidation(Object.assign({}, parsedAs, {\n          pathname: interpolatedAs.result,\n          query: omitParmsFromQuery(query, interpolatedAs.params)\n        }));\n      } else {\n        // Merge params into `query`, overwriting any specified in search\n        Object.assign(query, routeMatch);\n      }\n    }\n\n    Router.events.emit('routeChangeStart', as, routeProps);\n\n    try {\n      var ref, ref1;\n      let routeInfo = await this.getRouteInfo(route, pathname, query, as, resolvedAs, routeProps);\n      let {\n        error,\n        props,\n        __N_SSG,\n        __N_SSP\n      } = routeInfo; // handle redirect on client-transition\n\n      if ((__N_SSG || __N_SSP) && props) {\n        if (props.pageProps && props.pageProps.__N_REDIRECT) {\n          const destination = props.pageProps.__N_REDIRECT; // check if destination is internal (resolves to a page) and attempt\n          // client-navigation if it is falling back to hard navigation if\n          // it's not\n\n          if (destination.startsWith('/') && props.pageProps.__N_REDIRECT_BASE_PATH !== false) {\n            const parsedHref = (0, _parseRelativeUrl).parseRelativeUrl(destination);\n            parsedHref.pathname = resolveDynamicRoute(parsedHref.pathname, pages);\n            const {\n              url: newUrl,\n              as: newAs\n            } = prepareUrlAs(this, destination, destination);\n            return this.change(method, newUrl, newAs, options);\n          }\n\n          window.location.href = destination;\n          return new Promise(() => {});\n        }\n\n        this.isPreview = !!props.__N_PREVIEW; // handle SSG data 404\n\n        if (props.notFound === SSG_DATA_NOT_FOUND) {\n          let notFoundRoute;\n\n          try {\n            await this.fetchComponent('/404');\n            notFoundRoute = '/404';\n          } catch (_) {\n            notFoundRoute = '/_error';\n          }\n\n          routeInfo = await this.getRouteInfo(notFoundRoute, notFoundRoute, query, as, resolvedAs, {\n            shallow: false\n          });\n        }\n      }\n\n      Router.events.emit('beforeHistoryChange', as, routeProps);\n      this.changeState(method, url, as, options);\n\n      if (options._h && pathname === '/_error' && ((ref = self.__NEXT_DATA__.props) === null || ref === void 0 ? void 0 : (ref1 = ref.pageProps) === null || ref1 === void 0 ? void 0 : ref1.statusCode) === 500 && (props === null || props === void 0 ? void 0 : props.pageProps)) {\n        // ensure statusCode is still correct for static 500 page\n        // when updating query information\n        props.pageProps.statusCode = 500;\n      } // shallow routing is only allowed for same page URL changes.\n\n\n      const isValidShallowRoute = options.shallow && this.route === route;\n\n      var _scroll;\n\n      const shouldScroll = (_scroll = options.scroll) !== null && _scroll !== void 0 ? _scroll : !isValidShallowRoute;\n      const resetScroll = shouldScroll ? {\n        x: 0,\n        y: 0\n      } : null;\n      await this.set(route, pathname, query, cleanedAs, routeInfo, forcedScroll !== null && forcedScroll !== void 0 ? forcedScroll : resetScroll).catch(e => {\n        if (e.cancelled) error = error || e;else throw e;\n      });\n\n      if (error) {\n        Router.events.emit('routeChangeError', error, cleanedAs, routeProps);\n        throw error;\n      }\n\n      if (false) {}\n\n      Router.events.emit('routeChangeComplete', as, routeProps);\n      return true;\n    } catch (err1) {\n      if ((0, _isError).default(err1) && err1.cancelled) {\n        return false;\n      }\n\n      throw err1;\n    }\n  }\n\n  changeState(method, url, as, options = {}) {\n    if (true) {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`);\n        return;\n      }\n\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`);\n        return;\n      }\n    }\n\n    if (method !== 'pushState' || (0, _utils).getURL() !== as) {\n      this._shallow = options.shallow;\n      window.history[method]({\n        url,\n        as,\n        options,\n        __N: true,\n        idx: this._idx = method !== 'pushState' ? this._idx : this._idx + 1\n      }, // Most browsers currently ignores this parameter, although they may use it in the future.\n      // Passing the empty string here should be safe against future changes to the method.\n      // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n      '', as);\n    }\n  }\n\n  async handleRouteInfoError(err, pathname, query, as, routeProps, loadErrorFail) {\n    if (err.cancelled) {\n      // bubble up cancellation errors\n      throw err;\n    }\n\n    if ((0, _routeLoader).isAssetError(err) || loadErrorFail) {\n      Router.events.emit('routeChangeError', err, as, routeProps); // If we can't load the page it could be one of following reasons\n      //  1. Page doesn't exists\n      //  2. Page does exist in a different zone\n      //  3. Internal error while loading the page\n      // So, doing a hard reload is the proper way to deal with this.\n\n      window.location.href = as; // Changing the URL doesn't block executing the current code path.\n      // So let's throw a cancellation error stop the routing logic.\n\n      throw buildCancellationError();\n    }\n\n    try {\n      let Component;\n      let styleSheets;\n      let props;\n\n      if (typeof Component === 'undefined' || typeof styleSheets === 'undefined') {\n        ({\n          page: Component,\n          styleSheets\n        } = await this.fetchComponent('/_error'));\n      }\n\n      const routeInfo = {\n        props,\n        Component,\n        styleSheets,\n        err,\n        error: err\n      };\n\n      if (!routeInfo.props) {\n        try {\n          routeInfo.props = await this.getInitialProps(Component, {\n            err,\n            pathname,\n            query\n          });\n        } catch (gipErr) {\n          console.error('Error in error page `getInitialProps`: ', gipErr);\n          routeInfo.props = {};\n        }\n      }\n\n      return routeInfo;\n    } catch (routeInfoErr) {\n      return this.handleRouteInfoError((0, _isError).default(routeInfoErr) ? routeInfoErr : new Error(routeInfoErr + ''), pathname, query, as, routeProps, true);\n    }\n  }\n\n  async getRouteInfo(route, pathname, query, as, resolvedAs, routeProps) {\n    try {\n      const existingRouteInfo = this.components[route];\n\n      if (routeProps.shallow && existingRouteInfo && this.route === route) {\n        return existingRouteInfo;\n      }\n\n      let cachedRouteInfo = undefined; // can only use non-initial route info\n      // cannot reuse route info in development since it can change after HMR\n\n      if (false) {}\n\n      const routeInfo = cachedRouteInfo || (await this.fetchComponent(route).then(res => ({\n        Component: res.page,\n        styleSheets: res.styleSheets,\n        __N_SSG: res.mod.__N_SSG,\n        __N_SSP: res.mod.__N_SSP,\n        __N_RSC: !!res.page.__next_rsc__\n      })));\n      const {\n        Component,\n        __N_SSG,\n        __N_SSP,\n        __N_RSC\n      } = routeInfo;\n\n      if (true) {\n        const {\n          isValidElementType\n        } = __webpack_require__(/*! react-is */ \"react-is\");\n\n        if (!isValidElementType(Component)) {\n          throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n        }\n      }\n\n      let dataHref;\n\n      if (__N_SSG || __N_SSP || __N_RSC) {\n        dataHref = this.pageLoader.getDataHref({\n          href: (0, _utils).formatWithValidation({\n            pathname,\n            query\n          }),\n          asPath: resolvedAs,\n          ssg: __N_SSG,\n          rsc: __N_RSC,\n          locale: this.locale\n        });\n      }\n\n      const props = await this._getData(() => __N_SSG || __N_SSP ? fetchNextData(dataHref, this.isSsr, false, __N_SSG ? this.sdc : this.sdr, !!__N_SSG && !this.isPreview) : this.getInitialProps(Component, // we provide AppTree later so this needs to be `any`\n      {\n        pathname,\n        query,\n        asPath: as,\n        locale: this.locale,\n        locales: this.locales,\n        defaultLocale: this.defaultLocale\n      }));\n\n      if (__N_RSC) {\n        const {\n          fresh,\n          data\n        } = await this._getData(() => this._getFlightData(dataHref));\n        props.pageProps = Object.assign(props.pageProps, {\n          __flight_serialized__: data,\n          __flight_fresh__: fresh\n        });\n      }\n\n      routeInfo.props = props;\n      this.components[route] = routeInfo;\n      return routeInfo;\n    } catch (err) {\n      return this.handleRouteInfoError((0, _isError).default(err) ? err : new Error(err + ''), pathname, query, as, routeProps);\n    }\n  }\n\n  set(route, pathname, query, as, data, resetScroll) {\n    this.isFallback = false;\n    this.route = route;\n    this.pathname = pathname;\n    this.query = query;\n    this.asPath = as;\n    return this.notify(data, resetScroll);\n  }\n  /**\n  * Callback to execute before replacing router state\n  * @param cb callback to be executed\n  */\n\n\n  beforePopState(cb) {\n    this._bps = cb;\n  }\n\n  onlyAHashChange(as) {\n    if (!this.asPath) return false;\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n    const [newUrlNoHash, newHash] = as.split('#'); // Makes sure we scroll to the provided hash if the url/hash are the same\n\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true;\n    } // If the urls are change, there's more than a hash change\n\n\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false;\n    } // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n\n\n    return oldHash !== newHash;\n  }\n\n  scrollToHash(as) {\n    const [, hash] = as.split('#'); // Scroll to top if the hash is just `#` with no value or `#top`\n    // To mirror browsers\n\n    if (hash === '' || hash === 'top') {\n      window.scrollTo(0, 0);\n      return;\n    } // First we check if the element by id is found\n\n\n    const idEl = document.getElementById(hash);\n\n    if (idEl) {\n      idEl.scrollIntoView();\n      return;\n    } // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n\n\n    const nameEl = document.getElementsByName(hash)[0];\n\n    if (nameEl) {\n      nameEl.scrollIntoView();\n    }\n  }\n\n  urlIsNew(asPath) {\n    return this.asPath !== asPath;\n  }\n  /**\n  * Prefetch page code, you may wait for the data during page rendering.\n  * This feature only works in production!\n  * @param url the href of prefetched page\n  * @param asPath the as path of the prefetched page\n  */\n\n\n  async prefetch(url, asPath = url, options = {}) {\n    let parsed = (0, _parseRelativeUrl).parseRelativeUrl(url);\n    let {\n      pathname,\n      query\n    } = parsed;\n\n    if (false) {}\n\n    const pages = await this.pageLoader.getPageList();\n    let resolvedAs = asPath;\n\n    if (false) {} else {\n      parsed.pathname = resolveDynamicRoute(parsed.pathname, pages);\n\n      if (parsed.pathname !== pathname) {\n        pathname = parsed.pathname;\n        parsed.pathname = pathname;\n        url = (0, _utils).formatWithValidation(parsed);\n      }\n    } // Prefetch is not supported in development mode because it would trigger on-demand-entries\n\n\n    if (true) {\n      return;\n    }\n\n    const effects = await this._preflightRequest({\n      as: addBasePath(asPath),\n      cache: true,\n      pages,\n      pathname,\n      query\n    });\n\n    if (effects.type === 'rewrite') {\n      parsed.pathname = effects.resolvedHref;\n      pathname = effects.resolvedHref;\n      query = _objectSpread(_objectSpread({}, query), effects.parsedAs.query);\n      resolvedAs = effects.asPath;\n      url = (0, _utils).formatWithValidation(parsed);\n    }\n\n    const route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname);\n    await Promise.all([this.pageLoader._isSsg(route).then(isSsg => {\n      return isSsg ? fetchNextData(this.pageLoader.getDataHref({\n        href: url,\n        asPath: resolvedAs,\n        ssg: true,\n        locale: typeof options.locale !== 'undefined' ? options.locale : this.locale\n      }), false, false, this.sdc, true) : false;\n    }), this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route)]);\n  }\n\n  async fetchComponent(route) {\n    let cancelled = false;\n\n    const cancel = this.clc = () => {\n      cancelled = true;\n    };\n\n    const handleCancelled = () => {\n      if (cancelled) {\n        const error = new Error(`Abort fetching component for route: \"${route}\"`);\n        error.cancelled = true;\n        throw error;\n      }\n\n      if (cancel === this.clc) {\n        this.clc = null;\n      }\n    };\n\n    try {\n      const componentResult = await this.pageLoader.loadPage(route);\n      handleCancelled();\n      return componentResult;\n    } catch (err) {\n      handleCancelled();\n      throw err;\n    }\n  }\n\n  _getData(fn) {\n    let cancelled = false;\n\n    const cancel = () => {\n      cancelled = true;\n    };\n\n    this.clc = cancel;\n    return fn().then(data => {\n      if (cancel === this.clc) {\n        this.clc = null;\n      }\n\n      if (cancelled) {\n        const err = new Error('Loading initial props cancelled');\n        err.cancelled = true;\n        throw err;\n      }\n\n      return data;\n    });\n  }\n\n  _getFlightData(dataHref) {\n    const {\n      href: cacheKey\n    } = new URL(dataHref, window.location.href);\n\n    if (!this.isPreview && this.sdc[cacheKey]) {\n      return Promise.resolve({\n        fresh: false,\n        data: this.sdc[cacheKey]\n      });\n    }\n\n    return fetchNextData(dataHref, true, true, this.sdc, false).then(serialized => {\n      this.sdc[cacheKey] = serialized;\n      return {\n        fresh: true,\n        data: serialized\n      };\n    });\n  }\n\n  async _preflightRequest(options) {\n    var ref;\n    const cleanedAs = delLocale(hasBasePath(options.as) ? delBasePath(options.as) : options.as, this.locale);\n    const fns = await this.pageLoader.getMiddlewareList();\n    const requiresPreflight = fns.some(([middleware, isSSR]) => {\n      return (0, _routeMatcher).getRouteMatcher((0, _getMiddlewareRegex).getMiddlewareRegex(middleware, !isSSR))(cleanedAs);\n    });\n\n    if (!requiresPreflight) {\n      return {\n        type: 'next'\n      };\n    }\n\n    const preflight = await this._getPreflightData({\n      preflightHref: options.as,\n      shouldCache: options.cache\n    });\n\n    if ((ref = preflight.rewrite) === null || ref === void 0 ? void 0 : ref.startsWith('/')) {\n      const parsed = (0, _parseRelativeUrl).parseRelativeUrl((0, _normalizeLocalePath).normalizeLocalePath(hasBasePath(preflight.rewrite) ? delBasePath(preflight.rewrite) : preflight.rewrite, this.locales).pathname);\n      const fsPathname = (0, _normalizeTrailingSlash).removePathTrailingSlash(parsed.pathname);\n      let matchedPage;\n      let resolvedHref;\n\n      if (options.pages.includes(fsPathname)) {\n        matchedPage = true;\n        resolvedHref = fsPathname;\n      } else {\n        resolvedHref = resolveDynamicRoute(fsPathname, options.pages);\n\n        if (resolvedHref !== parsed.pathname && options.pages.includes(resolvedHref)) {\n          matchedPage = true;\n        }\n      }\n\n      return {\n        type: 'rewrite',\n        asPath: parsed.pathname,\n        parsedAs: parsed,\n        matchedPage,\n        resolvedHref\n      };\n    }\n\n    if (preflight.redirect) {\n      if (preflight.redirect.startsWith('/')) {\n        const cleanRedirect = (0, _normalizeTrailingSlash).removePathTrailingSlash((0, _normalizeLocalePath).normalizeLocalePath(hasBasePath(preflight.redirect) ? delBasePath(preflight.redirect) : preflight.redirect, this.locales).pathname);\n        const {\n          url: newUrl,\n          as: newAs\n        } = prepareUrlAs(this, cleanRedirect, cleanRedirect);\n        return {\n          type: 'redirect',\n          newUrl,\n          newAs\n        };\n      }\n\n      return {\n        type: 'redirect',\n        destination: preflight.redirect\n      };\n    } // For SSR requests, they will be handled like normal pages.\n\n\n    if (preflight.refresh && !preflight.ssr) {\n      return {\n        type: 'refresh'\n      };\n    }\n\n    return {\n      type: 'next'\n    };\n  }\n\n  _getPreflightData(params) {\n    const {\n      preflightHref,\n      shouldCache = false\n    } = params;\n    const {\n      href: cacheKey\n    } = new URL(preflightHref, window.location.href);\n\n    if (false) {}\n\n    return fetch(preflightHref, {\n      method: 'HEAD',\n      credentials: 'same-origin',\n      headers: {\n        'x-middleware-preflight': '1'\n      }\n    }).then(res => {\n      if (!res.ok) {\n        throw new Error(`Failed to preflight request`);\n      }\n\n      return {\n        redirect: res.headers.get('Location'),\n        refresh: res.headers.has('x-middleware-refresh'),\n        rewrite: res.headers.get('x-middleware-rewrite'),\n        ssr: !!res.headers.get('x-middleware-ssr')\n      };\n    }).then(data => {\n      if (shouldCache) {\n        this.sde[cacheKey] = data;\n      }\n\n      return data;\n    }).catch(err => {\n      delete this.sde[cacheKey];\n      throw err;\n    });\n  }\n\n  getInitialProps(Component, ctx) {\n    const {\n      Component: App\n    } = this.components['/_app'];\n\n    const AppTree = this._wrapApp(App);\n\n    ctx.AppTree = AppTree;\n    return (0, _utils).loadGetInitialProps(App, {\n      AppTree,\n      Component,\n      router: this,\n      ctx\n    });\n  }\n\n  abortComponentLoad(as, routeProps) {\n    if (this.clc) {\n      Router.events.emit('routeChangeError', buildCancellationError(), as, routeProps);\n      this.clc();\n      this.clc = null;\n    }\n  }\n\n  notify(data, resetScroll) {\n    return this.sub(data, this.components['/_app'].Component, resetScroll);\n  }\n\n}\n\nRouter.events = (0, _mitt).default();\nexports[\"default\"] = Router;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/router/router.js\n");

/***/ }),

/***/ "./src/generated/graphql.tsx":
/*!***********************************!*\
  !*** ./src/generated/graphql.tsx ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BulkCreateSessionExercisesDocument\": () => (/* binding */ BulkCreateSessionExercisesDocument),\n/* harmony export */   \"useBulkCreateSessionExercisesMutation\": () => (/* binding */ useBulkCreateSessionExercisesMutation),\n/* harmony export */   \"BulkRemoveImgDocument\": () => (/* binding */ BulkRemoveImgDocument),\n/* harmony export */   \"useBulkRemoveImgMutation\": () => (/* binding */ useBulkRemoveImgMutation),\n/* harmony export */   \"CreateExerciseDocument\": () => (/* binding */ CreateExerciseDocument),\n/* harmony export */   \"useCreateExerciseMutation\": () => (/* binding */ useCreateExerciseMutation),\n/* harmony export */   \"CreateExerciseCategoryDocument\": () => (/* binding */ CreateExerciseCategoryDocument),\n/* harmony export */   \"useCreateExerciseCategoryMutation\": () => (/* binding */ useCreateExerciseCategoryMutation),\n/* harmony export */   \"CreateInbodyDocument\": () => (/* binding */ CreateInbodyDocument),\n/* harmony export */   \"useCreateInbodyMutation\": () => (/* binding */ useCreateInbodyMutation),\n/* harmony export */   \"CreateNonRegisteredUserDocument\": () => (/* binding */ CreateNonRegisteredUserDocument),\n/* harmony export */   \"useCreateNonRegisteredUserMutation\": () => (/* binding */ useCreateNonRegisteredUserMutation),\n/* harmony export */   \"CreateSessionDocument\": () => (/* binding */ CreateSessionDocument),\n/* harmony export */   \"useCreateSessionMutation\": () => (/* binding */ useCreateSessionMutation),\n/* harmony export */   \"CreateSessionExerciseDocument\": () => (/* binding */ CreateSessionExerciseDocument),\n/* harmony export */   \"useCreateSessionExerciseMutation\": () => (/* binding */ useCreateSessionExerciseMutation),\n/* harmony export */   \"CreateSessionExerciseVolumeDocument\": () => (/* binding */ CreateSessionExerciseVolumeDocument),\n/* harmony export */   \"useCreateSessionExerciseVolumeMutation\": () => (/* binding */ useCreateSessionExerciseVolumeMutation),\n/* harmony export */   \"CreateSessionHistoryDocument\": () => (/* binding */ CreateSessionHistoryDocument),\n/* harmony export */   \"useCreateSessionHistoryMutation\": () => (/* binding */ useCreateSessionHistoryMutation),\n/* harmony export */   \"CreateSocialTrainerDocument\": () => (/* binding */ CreateSocialTrainerDocument),\n/* harmony export */   \"useCreateSocialTrainerMutation\": () => (/* binding */ useCreateSocialTrainerMutation),\n/* harmony export */   \"CreateSocialUserDocument\": () => (/* binding */ CreateSocialUserDocument),\n/* harmony export */   \"useCreateSocialUserMutation\": () => (/* binding */ useCreateSocialUserMutation),\n/* harmony export */   \"CreateTrainerDocument\": () => (/* binding */ CreateTrainerDocument),\n/* harmony export */   \"useCreateTrainerMutation\": () => (/* binding */ useCreateTrainerMutation),\n/* harmony export */   \"CreateUserDocument\": () => (/* binding */ CreateUserDocument),\n/* harmony export */   \"useCreateUserMutation\": () => (/* binding */ useCreateUserMutation),\n/* harmony export */   \"CreateUserCategoryDocument\": () => (/* binding */ CreateUserCategoryDocument),\n/* harmony export */   \"useCreateUserCategoryMutation\": () => (/* binding */ useCreateUserCategoryMutation),\n/* harmony export */   \"RemoveExerciseDocument\": () => (/* binding */ RemoveExerciseDocument),\n/* harmony export */   \"useRemoveExerciseMutation\": () => (/* binding */ useRemoveExerciseMutation),\n/* harmony export */   \"RemoveSessionDocument\": () => (/* binding */ RemoveSessionDocument),\n/* harmony export */   \"useRemoveSessionMutation\": () => (/* binding */ useRemoveSessionMutation),\n/* harmony export */   \"RemoveSessionExerciseDocument\": () => (/* binding */ RemoveSessionExerciseDocument),\n/* harmony export */   \"useRemoveSessionExerciseMutation\": () => (/* binding */ useRemoveSessionExerciseMutation),\n/* harmony export */   \"RemoveTrainerDocument\": () => (/* binding */ RemoveTrainerDocument),\n/* harmony export */   \"useRemoveTrainerMutation\": () => (/* binding */ useRemoveTrainerMutation),\n/* harmony export */   \"RemoveUserDocument\": () => (/* binding */ RemoveUserDocument),\n/* harmony export */   \"useRemoveUserMutation\": () => (/* binding */ useRemoveUserMutation),\n/* harmony export */   \"UpdatePasswordTrainerDocument\": () => (/* binding */ UpdatePasswordTrainerDocument),\n/* harmony export */   \"useUpdatePasswordTrainerMutation\": () => (/* binding */ useUpdatePasswordTrainerMutation),\n/* harmony export */   \"UpdatePasswordUserDocument\": () => (/* binding */ UpdatePasswordUserDocument),\n/* harmony export */   \"useUpdatePasswordUserMutation\": () => (/* binding */ useUpdatePasswordUserMutation),\n/* harmony export */   \"UpdateSessionDocument\": () => (/* binding */ UpdateSessionDocument),\n/* harmony export */   \"useUpdateSessionMutation\": () => (/* binding */ useUpdateSessionMutation),\n/* harmony export */   \"UpdateTrainerDocument\": () => (/* binding */ UpdateTrainerDocument),\n/* harmony export */   \"useUpdateTrainerMutation\": () => (/* binding */ useUpdateTrainerMutation),\n/* harmony export */   \"UpdateUserDocument\": () => (/* binding */ UpdateUserDocument),\n/* harmony export */   \"useUpdateUserMutation\": () => (/* binding */ useUpdateUserMutation),\n/* harmony export */   \"FindImgsByUserIdAndTrainerIdDocument\": () => (/* binding */ FindImgsByUserIdAndTrainerIdDocument),\n/* harmony export */   \"useFindImgsByUserIdAndTrainerIdQuery\": () => (/* binding */ useFindImgsByUserIdAndTrainerIdQuery),\n/* harmony export */   \"useFindImgsByUserIdAndTrainerIdLazyQuery\": () => (/* binding */ useFindImgsByUserIdAndTrainerIdLazyQuery),\n/* harmony export */   \"FindOneUserByPhoneNumberDocument\": () => (/* binding */ FindOneUserByPhoneNumberDocument),\n/* harmony export */   \"useFindOneUserByPhoneNumberQuery\": () => (/* binding */ useFindOneUserByPhoneNumberQuery),\n/* harmony export */   \"useFindOneUserByPhoneNumberLazyQuery\": () => (/* binding */ useFindOneUserByPhoneNumberLazyQuery),\n/* harmony export */   \"NonRegisteredUserDocument\": () => (/* binding */ NonRegisteredUserDocument),\n/* harmony export */   \"useNonRegisteredUserQuery\": () => (/* binding */ useNonRegisteredUserQuery),\n/* harmony export */   \"useNonRegisteredUserLazyQuery\": () => (/* binding */ useNonRegisteredUserLazyQuery),\n/* harmony export */   \"SessionDocument\": () => (/* binding */ SessionDocument),\n/* harmony export */   \"useSessionQuery\": () => (/* binding */ useSessionQuery),\n/* harmony export */   \"useSessionLazyQuery\": () => (/* binding */ useSessionLazyQuery),\n/* harmony export */   \"SessionHistoriesDocument\": () => (/* binding */ SessionHistoriesDocument),\n/* harmony export */   \"useSessionHistoriesQuery\": () => (/* binding */ useSessionHistoriesQuery),\n/* harmony export */   \"useSessionHistoriesLazyQuery\": () => (/* binding */ useSessionHistoriesLazyQuery),\n/* harmony export */   \"TrainerDocument\": () => (/* binding */ TrainerDocument),\n/* harmony export */   \"useTrainerQuery\": () => (/* binding */ useTrainerQuery),\n/* harmony export */   \"useTrainerLazyQuery\": () => (/* binding */ useTrainerLazyQuery),\n/* harmony export */   \"UserDocument\": () => (/* binding */ UserDocument),\n/* harmony export */   \"useUserQuery\": () => (/* binding */ useUserQuery),\n/* harmony export */   \"useUserLazyQuery\": () => (/* binding */ useUserLazyQuery),\n/* harmony export */   \"UserCategoriesDocument\": () => (/* binding */ UserCategoriesDocument),\n/* harmony export */   \"useUserCategoriesQuery\": () => (/* binding */ useUserCategoriesQuery),\n/* harmony export */   \"useUserCategoriesLazyQuery\": () => (/* binding */ useUserCategoriesLazyQuery),\n/* harmony export */   \"UserCategoryDocument\": () => (/* binding */ UserCategoryDocument),\n/* harmony export */   \"useUserCategoryQuery\": () => (/* binding */ useUserCategoryQuery),\n/* harmony export */   \"useUserCategoryLazyQuery\": () => (/* binding */ useUserCategoryLazyQuery)\n/* harmony export */ });\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client */ \"@apollo/client\");\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_apollo_client__WEBPACK_IMPORTED_MODULE_0__);\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\nconst BulkCreateSessionExercisesDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tmutation BulkCreateSessionExercises(\n\t\t$exerciseCategoryNames: [String!]!\n\t\t$names: [String!]!\n\t\t$sessionId: Int!\n\t) {\n\t\tbulkCreateSessionExercises(\n\t\t\texerciseCategoryNames: $exerciseCategoryNames\n\t\t\tnames: $names\n\t\t\tsessionId: $sessionId\n\t\t) {\n\t\t\tid\n\t\t\tname\n\t\t\tsessionId\n\t\t\texerciseCategoryName\n\t\t}\n\t}\n`;\n\n/**\n * __useBulkCreateSessionExercisesMutation__\n *\n * To run a mutation, you first call `useBulkCreateSessionExercisesMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useBulkCreateSessionExercisesMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [bulkCreateSessionExercisesMutation, { data, loading, error }] = useBulkCreateSessionExercisesMutation({\n *   variables: {\n *      exerciseCategoryNames: // value for 'exerciseCategoryNames'\n *      names: // value for 'names'\n *      sessionId: // value for 'sessionId'\n *   },\n * });\n */\nfunction useBulkCreateSessionExercisesMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(BulkCreateSessionExercisesDocument, options);\n}\nconst BulkRemoveImgDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tmutation BulkRemoveImg($ids: [Int!]!) {\n\t\tbulkRemoveImg(ids: $ids)\n\t}\n`;\n\n/**\n * __useBulkRemoveImgMutation__\n *\n * To run a mutation, you first call `useBulkRemoveImgMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useBulkRemoveImgMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [bulkRemoveImgMutation, { data, loading, error }] = useBulkRemoveImgMutation({\n *   variables: {\n *      ids: // value for 'ids'\n *   },\n * });\n */\nfunction useBulkRemoveImgMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(BulkRemoveImgDocument, options);\n}\nconst CreateExerciseDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tmutation CreateExercise($createExerciseInput: CreateExerciseInput!) {\n\t\tcreateExercise(createExerciseInput: $createExerciseInput) {\n\t\t\tid\n\t\t\tname\n\t\t\texerciseCategoryId\n\t\t}\n\t}\n`;\n\n/**\n * __useCreateExerciseMutation__\n *\n * To run a mutation, you first call `useCreateExerciseMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateExerciseMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createExerciseMutation, { data, loading, error }] = useCreateExerciseMutation({\n *   variables: {\n *      createExerciseInput: // value for 'createExerciseInput'\n *   },\n * });\n */\nfunction useCreateExerciseMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(CreateExerciseDocument, options);\n}\nconst CreateExerciseCategoryDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tmutation CreateExerciseCategory(\n\t\t$createExerciseCategoryInput: CreateExerciseCategoryInput!\n\t) {\n\t\tcreateExerciseCategory(\n\t\t\tcreateExerciseCategoryInput: $createExerciseCategoryInput\n\t\t) {\n\t\t\tid\n\t\t\tname\n\t\t\ttrainerId\n\t\t}\n\t}\n`;\n\n/**\n * __useCreateExerciseCategoryMutation__\n *\n * To run a mutation, you first call `useCreateExerciseCategoryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateExerciseCategoryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createExerciseCategoryMutation, { data, loading, error }] = useCreateExerciseCategoryMutation({\n *   variables: {\n *      createExerciseCategoryInput: // value for 'createExerciseCategoryInput'\n *   },\n * });\n */\nfunction useCreateExerciseCategoryMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(CreateExerciseCategoryDocument, options);\n}\nconst CreateInbodyDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tmutation CreateInbody($createInbodyInput: CreateInbodyInput!) {\n\t\tcreateInbody(createInbodyInput: $createInbodyInput) {\n\t\t\tid\n\t\t\tbodyWeight\n\t\t\tmuscleWeight\n\t\t\tbodyFat\n\t\t}\n\t}\n`;\n\n/**\n * __useCreateInbodyMutation__\n *\n * To run a mutation, you first call `useCreateInbodyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateInbodyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createInbodyMutation, { data, loading, error }] = useCreateInbodyMutation({\n *   variables: {\n *      createInbodyInput: // value for 'createInbodyInput'\n *   },\n * });\n */\nfunction useCreateInbodyMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(CreateInbodyDocument, options);\n}\nconst CreateNonRegisteredUserDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tmutation CreateNonRegisteredUser(\n\t\t$createNonRegisteredUserInput: CreateNonRegisteredUserInput!\n\t) {\n\t\tcreateNonRegisteredUser(\n\t\t\tcreateNonRegisteredUserInput: $createNonRegisteredUserInput\n\t\t) {\n\t\t\tid\n\t\t\tuserName\n\t\t\tphoneNumber\n\t\t\tgender\n\t\t\ttrainerId\n\t\t}\n\t}\n`;\n\n/**\n * __useCreateNonRegisteredUserMutation__\n *\n * To run a mutation, you first call `useCreateNonRegisteredUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateNonRegisteredUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createNonRegisteredUserMutation, { data, loading, error }] = useCreateNonRegisteredUserMutation({\n *   variables: {\n *      createNonRegisteredUserInput: // value for 'createNonRegisteredUserInput'\n *   },\n * });\n */\nfunction useCreateNonRegisteredUserMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(CreateNonRegisteredUserDocument, options);\n}\nconst CreateSessionDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tmutation CreateSession($createSessionInput: CreateSessionInput!) {\n\t\tcreateSession(createSessionInput: $createSessionInput) {\n\t\t\tid\n\t\t\tuserId\n\t\t\tdate\n\t\t\ttrainerId\n\t\t\tfeedback\n\t\t}\n\t}\n`;\n\n/**\n * __useCreateSessionMutation__\n *\n * To run a mutation, you first call `useCreateSessionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateSessionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createSessionMutation, { data, loading, error }] = useCreateSessionMutation({\n *   variables: {\n *      createSessionInput: // value for 'createSessionInput'\n *   },\n * });\n */\nfunction useCreateSessionMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(CreateSessionDocument, options);\n}\nconst CreateSessionExerciseDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tmutation CreateSessionExercise(\n\t\t$createSessionExerciseInput: CreateSessionExerciseInput!\n\t) {\n\t\tcreateSessionExercise(\n\t\t\tcreateSessionExerciseInput: $createSessionExerciseInput\n\t\t) {\n\t\t\tid\n\t\t\tname\n\t\t\tsessionId\n\t\t\texerciseCategoryName\n\t\t}\n\t}\n`;\n\n/**\n * __useCreateSessionExerciseMutation__\n *\n * To run a mutation, you first call `useCreateSessionExerciseMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateSessionExerciseMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createSessionExerciseMutation, { data, loading, error }] = useCreateSessionExerciseMutation({\n *   variables: {\n *      createSessionExerciseInput: // value for 'createSessionExerciseInput'\n *   },\n * });\n */\nfunction useCreateSessionExerciseMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(CreateSessionExerciseDocument, options);\n}\nconst CreateSessionExerciseVolumeDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tmutation CreateSessionExerciseVolume(\n\t\t$createSessionExerciseVolumeInput: CreateSessionExerciseVolumeInput!\n\t) {\n\t\tcreateSessionExerciseVolume(\n\t\t\tcreateSessionExerciseVolumeInput: $createSessionExerciseVolumeInput\n\t\t) {\n\t\t\tid\n\t\t\treps\n\t\t\tsets\n\t\t\tweight\n\t\t\tseq\n\t\t}\n\t}\n`;\n\n/**\n * __useCreateSessionExerciseVolumeMutation__\n *\n * To run a mutation, you first call `useCreateSessionExerciseVolumeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateSessionExerciseVolumeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createSessionExerciseVolumeMutation, { data, loading, error }] = useCreateSessionExerciseVolumeMutation({\n *   variables: {\n *      createSessionExerciseVolumeInput: // value for 'createSessionExerciseVolumeInput'\n *   },\n * });\n */\nfunction useCreateSessionExerciseVolumeMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(CreateSessionExerciseVolumeDocument, options);\n}\nconst CreateSessionHistoryDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tmutation CreateSessionHistory(\n\t\t$createSessionHistoryInput: CreateSessionHistoryInput!\n\t) {\n\t\tcreateSessionHistory(\n\t\t\tcreateSessionHistoryInput: $createSessionHistoryInput\n\t\t) {\n\t\t\tid\n\t\t\tdate\n\t\t\tcostPerSession\n\t\t\ttotalCount\n\t\t\tusedCount\n\t\t\tcommission\n\t\t\tusedCount\n\t\t\tuserId\n\t\t}\n\t}\n`;\n\n/**\n * __useCreateSessionHistoryMutation__\n *\n * To run a mutation, you first call `useCreateSessionHistoryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateSessionHistoryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createSessionHistoryMutation, { data, loading, error }] = useCreateSessionHistoryMutation({\n *   variables: {\n *      createSessionHistoryInput: // value for 'createSessionHistoryInput'\n *   },\n * });\n */\nfunction useCreateSessionHistoryMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(CreateSessionHistoryDocument, options);\n}\nconst CreateSocialTrainerDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tmutation CreateSocialTrainer(\n\t\t$createSocialTrainerInput: CreateSocialTrainerInput!\n\t) {\n\t\tcreateSocialTrainer(\n\t\t\tcreateSocialTrainerInput: $createSocialTrainerInput\n\t\t) {\n\t\t\tid\n\t\t\temail\n\t\t\tuserName\n\t\t\tbirthDate\n\t\t\tgender\n\t\t}\n\t}\n`;\n\n/**\n * __useCreateSocialTrainerMutation__\n *\n * To run a mutation, you first call `useCreateSocialTrainerMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateSocialTrainerMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createSocialTrainerMutation, { data, loading, error }] = useCreateSocialTrainerMutation({\n *   variables: {\n *      createSocialTrainerInput: // value for 'createSocialTrainerInput'\n *   },\n * });\n */\nfunction useCreateSocialTrainerMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(CreateSocialTrainerDocument, options);\n}\nconst CreateSocialUserDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tmutation CreateSocialUser(\n\t\t$createSocialUserInput: CreateSocialUserInput!\n\t) {\n\t\tcreateSocialUser(createSocialUserInput: $createSocialUserInput) {\n\t\t\tid\n\t\t\temail\n\t\t\tuserName\n\t\t\tbirthDate\n\t\t\tphoneNumber\n\t\t\tgender\n\t\t}\n\t}\n`;\n\n/**\n * __useCreateSocialUserMutation__\n *\n * To run a mutation, you first call `useCreateSocialUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateSocialUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createSocialUserMutation, { data, loading, error }] = useCreateSocialUserMutation({\n *   variables: {\n *      createSocialUserInput: // value for 'createSocialUserInput'\n *   },\n * });\n */\nfunction useCreateSocialUserMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(CreateSocialUserDocument, options);\n}\nconst CreateTrainerDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tmutation CreateTrainer($createTrainerInput: CreateTrainerInput!) {\n\t\tcreateTrainer(createTrainerInput: $createTrainerInput) {\n\t\t\tid\n\t\t\temail\n\t\t\tuserName\n\t\t\tbirthDate\n\t\t\tphoneNumber\n\t\t\tgender\n\t\t}\n\t}\n`;\n\n/**\n * __useCreateTrainerMutation__\n *\n * To run a mutation, you first call `useCreateTrainerMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTrainerMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTrainerMutation, { data, loading, error }] = useCreateTrainerMutation({\n *   variables: {\n *      createTrainerInput: // value for 'createTrainerInput'\n *   },\n * });\n */\nfunction useCreateTrainerMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(CreateTrainerDocument, options);\n}\nconst CreateUserDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tmutation CreateUser($createUserInput: CreateUserInput!) {\n\t\tcreateUser(createUserInput: $createUserInput) {\n\t\t\tid\n\t\t\temail\n\t\t\tuserName\n\t\t\tbirthDate\n\t\t\tphoneNumber\n\t\t\tgender\n\t\t\tgraduate\n\t\t}\n\t}\n`;\n\n/**\n * __useCreateUserMutation__\n *\n * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({\n *   variables: {\n *      createUserInput: // value for 'createUserInput'\n *   },\n * });\n */\nfunction useCreateUserMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(CreateUserDocument, options);\n}\nconst CreateUserCategoryDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tmutation CreateUserCategory(\n\t\t$createUserCategoryInput: CreateUserCategoryInput!\n\t) {\n\t\tcreateUserCategory(createUserCategoryInput: $createUserCategoryInput) {\n\t\t\tid\n\t\t\tstatus\n\t\t\ttrainerId\n\t\t}\n\t}\n`;\n\n/**\n * __useCreateUserCategoryMutation__\n *\n * To run a mutation, you first call `useCreateUserCategoryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateUserCategoryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createUserCategoryMutation, { data, loading, error }] = useCreateUserCategoryMutation({\n *   variables: {\n *      createUserCategoryInput: // value for 'createUserCategoryInput'\n *   },\n * });\n */\nfunction useCreateUserCategoryMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(CreateUserCategoryDocument, options);\n}\nconst RemoveExerciseDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tmutation RemoveExercise($id: Int!) {\n\t\tremoveExercise(id: $id) {\n\t\t\tid\n\t\t\tname\n\t\t\texerciseCategoryId\n\t\t}\n\t}\n`;\n\n/**\n * __useRemoveExerciseMutation__\n *\n * To run a mutation, you first call `useRemoveExerciseMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveExerciseMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeExerciseMutation, { data, loading, error }] = useRemoveExerciseMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nfunction useRemoveExerciseMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(RemoveExerciseDocument, options);\n}\nconst RemoveSessionDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tmutation RemoveSession($id: Int!) {\n\t\tremoveSession(id: $id) {\n\t\t\tid\n\t\t\tuserId\n\t\t\tdate\n\t\t\ttrainerId\n\t\t\tfeedback\n\t\t}\n\t}\n`;\n\n/**\n * __useRemoveSessionMutation__\n *\n * To run a mutation, you first call `useRemoveSessionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveSessionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeSessionMutation, { data, loading, error }] = useRemoveSessionMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nfunction useRemoveSessionMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(RemoveSessionDocument, options);\n}\nconst RemoveSessionExerciseDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tmutation RemoveSessionExercise($id: Int!) {\n\t\tremoveSessionExercise(id: $id)\n\t}\n`;\n\n/**\n * __useRemoveSessionExerciseMutation__\n *\n * To run a mutation, you first call `useRemoveSessionExerciseMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveSessionExerciseMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeSessionExerciseMutation, { data, loading, error }] = useRemoveSessionExerciseMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nfunction useRemoveSessionExerciseMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(RemoveSessionExerciseDocument, options);\n}\nconst RemoveTrainerDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tmutation RemoveTrainer($id: Int!) {\n\t\tremoveTrainer(id: $id) {\n\t\t\tid\n\t\t\temail\n\t\t\tuserName\n\t\t\tbirthDate\n\t\t\tphoneNumber\n\t\t\tgender\n\t\t}\n\t}\n`;\n\n/**\n * __useRemoveTrainerMutation__\n *\n * To run a mutation, you first call `useRemoveTrainerMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveTrainerMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeTrainerMutation, { data, loading, error }] = useRemoveTrainerMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nfunction useRemoveTrainerMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(RemoveTrainerDocument, options);\n}\nconst RemoveUserDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tmutation RemoveUser($id: Int!) {\n\t\tremoveUser(id: $id) {\n\t\t\tid\n\t\t\temail\n\t\t\tuserName\n\t\t\tbirthDate\n\t\t\tphoneNumber\n\t\t\tgender\n\t\t}\n\t}\n`;\n\n/**\n * __useRemoveUserMutation__\n *\n * To run a mutation, you first call `useRemoveUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeUserMutation, { data, loading, error }] = useRemoveUserMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nfunction useRemoveUserMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(RemoveUserDocument, options);\n}\nconst UpdatePasswordTrainerDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tmutation UpdatePasswordTrainer(\n\t\t$updatePasswordTrainerInput: UpdatePasswordTrainerInput!\n\t) {\n\t\tupdatePasswordTrainer(\n\t\t\tupdatePasswordTrainerInput: $updatePasswordTrainerInput\n\t\t) {\n\t\t\tid\n\t\t\temail\n\t\t\tuserName\n\t\t\tbirthDate\n\t\t\tphoneNumber\n\t\t\tgender\n\t\t}\n\t}\n`;\n\n/**\n * __useUpdatePasswordTrainerMutation__\n *\n * To run a mutation, you first call `useUpdatePasswordTrainerMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdatePasswordTrainerMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updatePasswordTrainerMutation, { data, loading, error }] = useUpdatePasswordTrainerMutation({\n *   variables: {\n *      updatePasswordTrainerInput: // value for 'updatePasswordTrainerInput'\n *   },\n * });\n */\nfunction useUpdatePasswordTrainerMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(UpdatePasswordTrainerDocument, options);\n}\nconst UpdatePasswordUserDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tmutation UpdatePasswordUser(\n\t\t$updatePasswordUserInput: UpdatePasswordUserInput!\n\t) {\n\t\tupdatePasswordUser(updatePasswordUserInput: $updatePasswordUserInput) {\n\t\t\tid\n\t\t\temail\n\t\t\tuserName\n\t\t\tbirthDate\n\t\t\tphoneNumber\n\t\t\tgender\n\t\t}\n\t}\n`;\n\n/**\n * __useUpdatePasswordUserMutation__\n *\n * To run a mutation, you first call `useUpdatePasswordUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdatePasswordUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updatePasswordUserMutation, { data, loading, error }] = useUpdatePasswordUserMutation({\n *   variables: {\n *      updatePasswordUserInput: // value for 'updatePasswordUserInput'\n *   },\n * });\n */\nfunction useUpdatePasswordUserMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(UpdatePasswordUserDocument, options);\n}\nconst UpdateSessionDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tmutation UpdateSession($updateSessionInput: UpdateSessionInput!) {\n\t\tupdateSession(updateSessionInput: $updateSessionInput) {\n\t\t\tid\n\t\t\tuserId\n\t\t\tdate\n\t\t\ttrainerId\n\t\t\tfeedback\n\t\t}\n\t}\n`;\n\n/**\n * __useUpdateSessionMutation__\n *\n * To run a mutation, you first call `useUpdateSessionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateSessionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateSessionMutation, { data, loading, error }] = useUpdateSessionMutation({\n *   variables: {\n *      updateSessionInput: // value for 'updateSessionInput'\n *   },\n * });\n */\nfunction useUpdateSessionMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(UpdateSessionDocument, options);\n}\nconst UpdateTrainerDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tmutation UpdateTrainer($updateTrainerInput: UpdateTrainerInput!) {\n\t\tupdateTrainer(updateTrainerInput: $updateTrainerInput) {\n\t\t\tid\n\t\t\temail\n\t\t\tuserName\n\t\t\tbirthDate\n\t\t\tphoneNumber\n\t\t\tgender\n\t\t}\n\t}\n`;\n\n/**\n * __useUpdateTrainerMutation__\n *\n * To run a mutation, you first call `useUpdateTrainerMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateTrainerMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateTrainerMutation, { data, loading, error }] = useUpdateTrainerMutation({\n *   variables: {\n *      updateTrainerInput: // value for 'updateTrainerInput'\n *   },\n * });\n */\nfunction useUpdateTrainerMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(UpdateTrainerDocument, options);\n}\nconst UpdateUserDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tmutation UpdateUser($updateUserInput: UpdateUserInput!) {\n\t\tupdateUser(updateUserInput: $updateUserInput) {\n\t\t\tid\n\t\t\temail\n\t\t\tuserName\n\t\t\tbirthDate\n\t\t\tphoneNumber\n\t\t\tgender\n\t\t\tgraduate\n\t\t\tuserCategoryId\n\t\t}\n\t}\n`;\n\n/**\n * __useUpdateUserMutation__\n *\n * To run a mutation, you first call `useUpdateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateUserMutation, { data, loading, error }] = useUpdateUserMutation({\n *   variables: {\n *      updateUserInput: // value for 'updateUserInput'\n *   },\n * });\n */\nfunction useUpdateUserMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(UpdateUserDocument, options);\n}\nconst FindImgsByUserIdAndTrainerIdDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tquery FindImgsByUserIdAndTrainerId($findImgsInput: FindImgsInput!) {\n\t\tfindImgsByUserIdAndTrainerId(findImgsInput: $findImgsInput) {\n\t\t\tid\n\t\t\turl\n\t\t\tchatId\n\t\t\tuserId\n\t\t\ttrainerId\n\t\t\tcreatedAt\n\t\t\tchat {\n\t\t\t\tsender\n\t\t\t}\n\t\t}\n\t}\n`;\n/**\n * __useFindImgsByUserIdAndTrainerIdQuery__\n *\n * To run a query within a React component, call `useFindImgsByUserIdAndTrainerIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindImgsByUserIdAndTrainerIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindImgsByUserIdAndTrainerIdQuery({\n *   variables: {\n *      findImgsInput: // value for 'findImgsInput'\n *   },\n * });\n */\n\nfunction useFindImgsByUserIdAndTrainerIdQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(FindImgsByUserIdAndTrainerIdDocument, options);\n}\nfunction useFindImgsByUserIdAndTrainerIdLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(FindImgsByUserIdAndTrainerIdDocument, options);\n}\nconst FindOneUserByPhoneNumberDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tquery FindOneUserByPhoneNumber($phoneNumber: String!) {\n\t\tfindOneUserByPhoneNumber(phoneNumber: $phoneNumber) {\n\t\t\tid\n\t\t\temail\n\t\t\tuserName\n\t\t\tbirthDate\n\t\t\tphoneNumber\n\t\t\tgender\n\t\t\tgraduate\n\t\t}\n\t}\n`;\n/**\n * __useFindOneUserByPhoneNumberQuery__\n *\n * To run a query within a React component, call `useFindOneUserByPhoneNumberQuery` and pass it any options that fit your needs.\n * When your component renders, `useFindOneUserByPhoneNumberQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFindOneUserByPhoneNumberQuery({\n *   variables: {\n *      phoneNumber: // value for 'phoneNumber'\n *   },\n * });\n */\n\nfunction useFindOneUserByPhoneNumberQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(FindOneUserByPhoneNumberDocument, options);\n}\nfunction useFindOneUserByPhoneNumberLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(FindOneUserByPhoneNumberDocument, options);\n}\nconst NonRegisteredUserDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tquery NonRegisteredUser($id: Int!) {\n\t\tnonRegisteredUser(id: $id) {\n\t\t\tid\n\t\t\tuserName\n\t\t\tphoneNumber\n\t\t\tgraduate\n\t\t\tgender\n\t\t\tuserCategoryId\n\t\t}\n\t}\n`;\n/**\n * __useNonRegisteredUserQuery__\n *\n * To run a query within a React component, call `useNonRegisteredUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useNonRegisteredUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNonRegisteredUserQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nfunction useNonRegisteredUserQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(NonRegisteredUserDocument, options);\n}\nfunction useNonRegisteredUserLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(NonRegisteredUserDocument, options);\n}\nconst SessionDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tquery Session($id: Int!) {\n\t\tsession(id: $id) {\n\t\t\tid\n\t\t\tuserId\n\t\t\ttrainerId\n\t\t\tfeedback\n\t\t\tsentFeedback\n\t\t\tcompletedSession\n\t\t\tdate\n\t\t\tsessionExercises {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tsessionId\n\t\t\t\texerciseCategoryName\n\t\t\t\tsessionExerciseVolumes {\n\t\t\t\t\tid\n\t\t\t\t\treps\n\t\t\t\t\tsets\n\t\t\t\t\tweight\n\t\t\t\t\tseq\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`;\n/**\n * __useSessionQuery__\n *\n * To run a query within a React component, call `useSessionQuery` and pass it any options that fit your needs.\n * When your component renders, `useSessionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSessionQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nfunction useSessionQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(SessionDocument, options);\n}\nfunction useSessionLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(SessionDocument, options);\n}\nconst SessionHistoriesDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tquery SessionHistories {\n\t\tsessionHistories {\n\t\t\tid\n\t\t\tdate\n\t\t\tcostPerSession\n\t\t\ttotalCount\n\t\t\tusedCount\n\t\t\tcommission\n\t\t\tuserId\n\t\t}\n\t}\n`;\n/**\n * __useSessionHistoriesQuery__\n *\n * To run a query within a React component, call `useSessionHistoriesQuery` and pass it any options that fit your needs.\n * When your component renders, `useSessionHistoriesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSessionHistoriesQuery({\n *   variables: {\n *   },\n * });\n */\n\nfunction useSessionHistoriesQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(SessionHistoriesDocument, options);\n}\nfunction useSessionHistoriesLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(SessionHistoriesDocument, options);\n}\nconst TrainerDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tquery Trainer($id: Int!) {\n\t\ttrainer(id: $id) {\n\t\t\tid\n\t\t\temail\n\t\t\tuserName\n\t\t\tbirthDate\n\t\t\tphoneNumber\n\t\t\tgender\n\t\t\tusers {\n\t\t\t\tid\n\t\t\t\temail\n\t\t\t\tuserName\n\t\t\t\tbirthDate\n\t\t\t\tphoneNumber\n\t\t\t\tgender\n\t\t\t\tgraduate\n\t\t\t\tuserCategoryId\n\t\t\t\tsessionHistories {\n\t\t\t\t\tid\n\t\t\t\t\tdate\n\t\t\t\t\tcostPerSession\n\t\t\t\t\ttotalCount\n\t\t\t\t\tusedCount\n\t\t\t\t\tcommission\n\t\t\t\t\tuserId\n\t\t\t\t\tuser {\n\t\t\t\t\t\tuserName\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tsessions {\n\t\t\t\tid\n\t\t\t\tuserId\n\t\t\t\ttrainerId\n\t\t\t\tfeedback\n\t\t\t\tsentFeedback\n\t\t\t\tcompletedSession\n\t\t\t\tdate\n\t\t\t\tuser {\n\t\t\t\t\tid\n\t\t\t\t\temail\n\t\t\t\t\tuserName\n\t\t\t\t\tgender\n\t\t\t\t}\n\t\t\t\tsessionExercises {\n\t\t\t\t\tname\n\t\t\t\t\tsessionExerciseVolumes {\n\t\t\t\t\t\tid\n\t\t\t\t\t\treps\n\t\t\t\t\t\tsets\n\t\t\t\t\t\tweight\n\t\t\t\t\t\tseq\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\texerciseCategories {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\ttrainerId\n\t\t\t\texercises {\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\texerciseCategoryId\n\t\t\t\t}\n\t\t\t}\n\t\t\tuserCategories {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\ttrainerId\n\t\t\t\tusers {\n\t\t\t\t\tid\n\t\t\t\t\temail\n\t\t\t\t\tuserName\n\t\t\t\t\tgender\n\t\t\t\t\tgraduate\n\t\t\t\t\tsessionHistories {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tdate\n\t\t\t\t\t\tcostPerSession\n\t\t\t\t\t\ttotalCount\n\t\t\t\t\t\tusedCount\n\t\t\t\t\t\tcommission\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnonRegisteredUsers {\n\t\t\t\t\tid\n\t\t\t\t\tuserName\n\t\t\t\t\tphoneNumber\n\t\t\t\t\tgraduate\n\t\t\t\t\tgender\n\t\t\t\t\tuserCategory {\n\t\t\t\t\t\tname\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`;\n/**\n * __useTrainerQuery__\n *\n * To run a query within a React component, call `useTrainerQuery` and pass it any options that fit your needs.\n * When your component renders, `useTrainerQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTrainerQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nfunction useTrainerQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(TrainerDocument, options);\n}\nfunction useTrainerLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(TrainerDocument, options);\n}\nconst UserDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tquery User($id: Int!) {\n\t\tuser(id: $id) {\n\t\t\tid\n\t\t\temail\n\t\t\tuserName\n\t\t\tbirthDate\n\t\t\tphoneNumber\n\t\t\tgender\n\t\t\tgraduate\n\t\t\ttrainerId\n\t\t\tuserCategoryId\n\t\t\tsessions {\n\t\t\t\tid\n\t\t\t\tuserId\n\t\t\t\ttrainerId\n\t\t\t\tfeedback\n\t\t\t\tsentFeedback\n\t\t\t\tcompletedSession\n\t\t\t\tdate\n\t\t\t\tsessionExercises {\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\tsessionId\n\t\t\t\t\tsessionExerciseVolumes {\n\t\t\t\t\t\treps\n\t\t\t\t\t\tsets\n\t\t\t\t\t\tweight\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tinbodies {\n\t\t\t\tid\n\t\t\t\tbodyWeight\n\t\t\t\tmuscleWeight\n\t\t\t\tbodyFat\n\t\t\t\tmeasuredDate\n\t\t\t}\n\t\t\tsessionHistories {\n\t\t\t\tid\n\t\t\t\tdate\n\t\t\t\tcostPerSession\n\t\t\t\ttotalCount\n\t\t\t\tusedCount\n\t\t\t\tcommission\n\t\t\t\tuserId\n\t\t\t}\n\t\t}\n\t}\n`;\n/**\n * __useUserQuery__\n *\n * To run a query within a React component, call `useUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nfunction useUserQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(UserDocument, options);\n}\nfunction useUserLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(UserDocument, options);\n}\nconst UserCategoriesDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tquery UserCategories {\n\t\tuserCategories {\n\t\t\tid\n\t\t\tname\n\t\t\ttrainerId\n\t\t}\n\t}\n`;\n/**\n * __useUserCategoriesQuery__\n *\n * To run a query within a React component, call `useUserCategoriesQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserCategoriesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserCategoriesQuery({\n *   variables: {\n *   },\n * });\n */\n\nfunction useUserCategoriesQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(UserCategoriesDocument, options);\n}\nfunction useUserCategoriesLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(UserCategoriesDocument, options);\n}\nconst UserCategoryDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n\tquery UserCategory($id: Int!) {\n\t\tuserCategory(id: $id) {\n\t\t\tid\n\t\t\tname\n\t\t\ttrainerId\n\t\t}\n\t}\n`;\n/**\n * __useUserCategoryQuery__\n *\n * To run a query within a React component, call `useUserCategoryQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserCategoryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserCategoryQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nfunction useUserCategoryQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(UserCategoryDocument, options);\n}\nfunction useUserCategoryLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(UserCategoryDocument, options);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/generated/graphql.tsx\n");

/***/ }),

/***/ "./src/graphql/vars.tsx":
/*!******************************!*\
  !*** ./src/graphql/vars.tsx ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"loginTypeVar\": () => (/* binding */ loginTypeVar),\n/* harmony export */   \"modalVar\": () => (/* binding */ modalVar),\n/* harmony export */   \"deleteStateVar\": () => (/* binding */ deleteStateVar),\n/* harmony export */   \"selectedUserVar\": () => (/* binding */ selectedUserVar),\n/* harmony export */   \"userDataVar\": () => (/* binding */ userDataVar),\n/* harmony export */   \"accessTokenVar\": () => (/* binding */ accessTokenVar),\n/* harmony export */   \"refreshTokenVar\": () => (/* binding */ refreshTokenVar)\n/* harmony export */ });\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client */ \"@apollo/client\");\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_apollo_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst loginTypeVar = (0,_apollo_client__WEBPACK_IMPORTED_MODULE_0__.makeVar)('');\nconst modalVar = (0,_apollo_client__WEBPACK_IMPORTED_MODULE_0__.makeVar)(false);\nconst deleteStateVar = (0,_apollo_client__WEBPACK_IMPORTED_MODULE_0__.makeVar)(false);\nconst selectedUserVar = (0,_apollo_client__WEBPACK_IMPORTED_MODULE_0__.makeVar)('');\nconst userDataVar = (0,_apollo_client__WEBPACK_IMPORTED_MODULE_0__.makeVar)(null);\nconst accessTokenVar = (0,_apollo_client__WEBPACK_IMPORTED_MODULE_0__.makeVar)('');\nconst refreshTokenVar = (0,_apollo_client__WEBPACK_IMPORTED_MODULE_0__.makeVar)('');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZ3JhcGhxbC92YXJzLnRzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUdPLE1BQU1DLFlBQVksR0FBR0QsdURBQU8sQ0FBQyxFQUFELENBQTVCO0FBQ0EsTUFBTUUsUUFBUSxHQUFHRix1REFBTyxDQUFDLEtBQUQsQ0FBeEI7QUFDQSxNQUFNRyxjQUFjLEdBQUdILHVEQUFPLENBQUMsS0FBRCxDQUE5QjtBQUNBLE1BQU1JLGVBQWUsR0FBR0osdURBQU8sQ0FBQyxFQUFELENBQS9CO0FBQ0EsTUFBTUssV0FBVyxHQUFHTCx1REFBTyxDQUFrQixJQUFsQixDQUEzQjtBQUNBLE1BQU1NLGNBQWMsR0FBR04sdURBQU8sQ0FBQyxFQUFELENBQTlCO0FBQ0EsTUFBTU8sZUFBZSxHQUFHUCx1REFBTyxDQUFDLEVBQUQsQ0FBL0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9zcmMvZ3JhcGhxbC92YXJzLnRzeD8xNTc4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1ha2VWYXIgfSBmcm9tICdAYXBvbGxvL2NsaWVudCdcbmltcG9ydCBVc2VyRGF0YSBmcm9tICcuLi90eXBlcy91c2VyRGF0YSdcblxuZXhwb3J0IGNvbnN0IGxvZ2luVHlwZVZhciA9IG1ha2VWYXIoJycpXG5leHBvcnQgY29uc3QgbW9kYWxWYXIgPSBtYWtlVmFyKGZhbHNlKVxuZXhwb3J0IGNvbnN0IGRlbGV0ZVN0YXRlVmFyID0gbWFrZVZhcihmYWxzZSlcbmV4cG9ydCBjb25zdCBzZWxlY3RlZFVzZXJWYXIgPSBtYWtlVmFyKCcnKVxuZXhwb3J0IGNvbnN0IHVzZXJEYXRhVmFyID0gbWFrZVZhcjxVc2VyRGF0YSB8IG51bGw+KG51bGwpXG5leHBvcnQgY29uc3QgYWNjZXNzVG9rZW5WYXIgPSBtYWtlVmFyKCcnKVxuZXhwb3J0IGNvbnN0IHJlZnJlc2hUb2tlblZhciA9IG1ha2VWYXIoJycpXG4iXSwibmFtZXMiOlsibWFrZVZhciIsImxvZ2luVHlwZVZhciIsIm1vZGFsVmFyIiwiZGVsZXRlU3RhdGVWYXIiLCJzZWxlY3RlZFVzZXJWYXIiLCJ1c2VyRGF0YVZhciIsImFjY2Vzc1Rva2VuVmFyIiwicmVmcmVzaFRva2VuVmFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/graphql/vars.tsx\n");

/***/ }),

/***/ "./src/pages/signup.tsx":
/*!******************************!*\
  !*** ./src/pages/signup.tsx ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client */ \"@apollo/client\");\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_apollo_client__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_client_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/client/router */ \"./node_modules/next/dist/client/router.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_datepicker_dist_react_datepicker_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-datepicker/dist/react-datepicker.css */ \"./node_modules/react-datepicker/dist/react-datepicker.css\");\n/* harmony import */ var react_datepicker_dist_react_datepicker_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_datepicker_dist_react_datepicker_css__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-hook-form */ \"react-hook-form\");\n/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_hook_form__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _generated_graphql__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../generated/graphql */ \"./src/generated/graphql.tsx\");\n/* harmony import */ var _graphql_vars__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../graphql/vars */ \"./src/graphql/vars.tsx\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__);\nvar _jsxFileName = \"/home/min/learning/2022.11_bodysign/client/src/pages/signup.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\n\nconst labelProperties = 'after:absolute after:border after:h-[4.8rem] after:bg-[#FDAD00] after:p-[1.2rem] after:w-full after:-top-0 after:z-[-1] after:transition-[left] after:duration-500 after:rounded-[2rem] peer-checked:cursor-default peer-checked:text-black peer-checked:after:left-0';\n\nconst Signup = () => {\n  var _errors$password, _errors$password2;\n\n  const router = (0,next_dist_client_router__WEBPACK_IMPORTED_MODULE_1__.useRouter)();\n  const queryLoginType = router.query.logintype;\n  const googleEmail = router.query.email;\n  const {\n    0: areYouTrainer,\n    1: setAreYouTrainer\n  } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(true);\n  const {\n    0: interestedTypes,\n    1: setInterestedTypes\n  } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)([{\n    id: 0,\n    type: 'PT',\n    name: 'PT샵',\n    status: false\n  }, {\n    id: 1,\n    type: 'Workout',\n    name: '헬스장',\n    status: false\n  }, {\n    id: 2,\n    type: 'Crossfit',\n    name: '크로스핏',\n    status: false\n  }, {\n    id: 3,\n    type: 'Yoga',\n    name: '요가',\n    status: false\n  }, {\n    id: 4,\n    type: 'Pilates',\n    name: '필라테스',\n    status: false\n  }, {\n    id: 5,\n    type: 'Etc',\n    name: '기타',\n    status: false\n  }]);\n  const {\n    0: checkedPersonalInfo,\n    1: setCheckedPersonalInfo\n  } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n  const modal = (0,_apollo_client__WEBPACK_IMPORTED_MODULE_0__.useReactiveVar)(_graphql_vars__WEBPACK_IMPORTED_MODULE_6__.modalVar);\n  const [createTrainer] = (0,_generated_graphql__WEBPACK_IMPORTED_MODULE_5__.useCreateTrainerMutation)();\n  const [createUser] = (0,_generated_graphql__WEBPACK_IMPORTED_MODULE_5__.useCreateUserMutation)();\n  const [createSocialTrainer] = (0,_generated_graphql__WEBPACK_IMPORTED_MODULE_5__.useCreateSocialTrainerMutation)();\n  const [createSocialUser] = (0,_generated_graphql__WEBPACK_IMPORTED_MODULE_5__.useCreateSocialUserMutation)();\n  const {\n    register,\n    watch,\n    formState: {\n      errors\n    },\n    handleSubmit\n  } = (0,react_hook_form__WEBPACK_IMPORTED_MODULE_4__.useForm)();\n  const watchPassword = watch('password');\n\n  const onSubmit = async data => {\n    const interestTypes = interestedTypes.filter(type => type.status);\n    const test = [];\n\n    for (let i = 0; i < interestTypes.length; i++) {\n      test.push(interestTypes[i].type);\n    }\n\n    if (queryLoginType === 'google') {\n      try {\n        areYouTrainer ? await createSocialTrainer({\n          variables: {\n            createSocialTrainerInput: {\n              email: googleEmail,\n              userName: data.userName,\n              gender: data.gender,\n              interests: test,\n              loginType: 'google'\n            }\n          }\n        }) : await createSocialUser({\n          variables: {\n            createSocialUserInput: {\n              email: googleEmail,\n              userName: data.userName,\n              phoneNumber: data.phoneNumber,\n              gender: data.gender,\n              birthDate: new Date(data.birthDate),\n              loginType: 'google'\n            }\n          }\n        });\n        router.push('/');\n      } catch (error) {\n        alert('소셜 회원가입에 실패했습니다.');\n      }\n    } else {\n      try {\n        areYouTrainer ? await createTrainer({\n          variables: {\n            createTrainerInput: {\n              email: data.email,\n              userName: data.userName,\n              password: data.password,\n              gender: data.gender,\n              interests: test,\n              loginType: 'local'\n            }\n          }\n        }) : await createUser({\n          variables: {\n            createUserInput: {\n              email: data.email,\n              userName: data.userName,\n              password: data.password,\n              phoneNumber: data.phoneNumber,\n              gender: data.gender,\n              birthDate: new Date(data.birthDate),\n              loginType: 'local'\n            }\n          }\n        });\n        router.push('/');\n      } catch (error) {\n        alert('회원가입에 실패했습니다.');\n      }\n    }\n  };\n\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.Fragment, {\n    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n      className: `${modal ? 'hidden' : ''}`,\n      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n        className: \"text-[3.2rem] text-left font-bold\",\n        children: \"\\uD68C\\uC6D0\\uAC00\\uC785\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 5\n      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"form\", {\n        className: \"mt-[2.4rem] text-[1.8rem]\",\n        onSubmit: handleSubmit(onSubmit),\n        children: [queryLoginType === 'google' ? /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"label\", {\n            children: \"\\uC774\\uBA54\\uC77C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 8\n          }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"input\", {\n            className: \"w-full p-[1.2rem] mt-[0.4rem] text-gray-400 border outline-none h-[4.8rem] rounded-[2rem]\",\n            type: \"text\",\n            value: googleEmail,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 8\n          }, undefined)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 7\n        }, undefined) : /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.Fragment, {\n          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n            children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"label\", {\n              children: \"\\uC774\\uBA54\\uC77C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 9\n            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"input\", _objectSpread({\n              className: \"w-full p-[1.2rem] mt-[0.4rem] border shadow-md h-[4.8rem] rounded-[2rem]\",\n              type: \"text\",\n              disabled: queryLoginType === 'google' // defaultValue 소셜 회원가입 이메일\n\n            }, register('email', {\n              required: true,\n              pattern: /^[A-Za-z0-9_\\.\\-]+@[A-Za-z0-9\\-]+\\.[A-Za-z0-9\\-]+/\n            })), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 9\n            }, undefined), errors.email && /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n              className: \"text-[16px] text-red-500 text-center mt-[0.4rem]\",\n              children: \"\\uC774\\uBA54\\uC77C \\uD615\\uC2DD\\uC744 \\uC9C0\\uCF1C\\uC8FC\\uC138\\uC694.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 10\n            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n              className: \"mt-[1.6rem]\",\n              children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"label\", {\n                children: \"\\uBE44\\uBC00\\uBC88\\uD638\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 10\n              }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"input\", _objectSpread({\n                className: \"w-full p-[1.2rem] mt-[0.4rem] border shadow-md h-[4.8rem] rounded-[2rem]\",\n                type: \"password\",\n                disabled: queryLoginType === 'google'\n              }, register('password', {\n                required: true,\n                minLength: 8\n              })), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 10\n              }, undefined), ((_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.type) === 'minLength' && /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n                className: \"text-[16px] text-red-500 mt-[0.4rem] text-center\",\n                children: \"\\uBE44\\uBC00\\uBC88\\uD638\\uB294 \\uCD5C\\uC18C 8\\uC790 \\uC774\\uC0C1\\uC73C\\uB85C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 11\n              }, undefined)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 9\n            }, undefined)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 8\n          }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n            className: \"mt-[1.6rem]\",\n            children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"label\", {\n              children: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 9\n            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"input\", _objectSpread({\n              className: \"w-full p-[1.2rem] mt-[0.4rem] border shadow-md h-[4.8rem] rounded-[2rem]\",\n              type: \"password\",\n              disabled: queryLoginType === 'google'\n            }, register('checkPassword', {\n              required: true,\n              minLength: 8,\n              validate: {\n                checkPassword: value => {\n                  return value === watchPassword;\n                }\n              }\n            })), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 9\n            }, undefined), errors.checkPassword && /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n              className: \"text-[16px] text-red-500 mt-[0.4rem] text-center\",\n              children: \"\\uBE44\\uBC00\\uBC88\\uD638\\uAC00 \\uC77C\\uCE58\\uD558\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 10\n            }, undefined), ((_errors$password2 = errors.password) === null || _errors$password2 === void 0 ? void 0 : _errors$password2.type) === 'minLength' && /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n              className: \"text-[16px] text-red-500 mt-[0.4rem] text-center\",\n              children: \"\\uBE44\\uBC00\\uBC88\\uD638\\uB294 \\uCD5C\\uC18C 8\\uC790 \\uC774\\uC0C1\\uC73C\\uB85C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 10\n            }, undefined)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 8\n          }, undefined)]\n        }, void 0, true), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n          className: \"mt-[1.6rem]\",\n          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"label\", {\n            children: \"\\uC774\\uB984\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 7\n          }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"input\", _objectSpread({\n            className: \"w-full p-[1.2rem] mt-[0.4rem] border shadow-md h-[4.8rem] rounded-[2rem]\",\n            type: \"text\"\n          }, register('userName', {\n            required: true\n          })), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 7\n          }, undefined)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 6\n        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n          className: \"mt-[1.6rem]\",\n          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"span\", {\n            children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"input\", _objectSpread({\n              className: \"hidden peer\",\n              type: \"radio\",\n              id: \"male\",\n              value: \"male\",\n              defaultChecked: true\n            }, register('gender', {\n              required: true\n            })), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 8\n            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"label\", {\n              className: `${labelProperties} h-[4.8rem] rounded-l-[2rem] w-1/2 text-center p-[1.2rem] inline-block relative border border-r-0 cursor-pointer after:left-full after:border-r-0`,\n              htmlFor: \"male\",\n              children: \"\\uB0A8\\uC131\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 8\n            }, undefined)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 7\n          }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"span\", {\n            children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"input\", _objectSpread({\n              className: \"hidden peer\",\n              type: \"radio\",\n              id: \"female\",\n              value: \"female\"\n            }, register('gender', {\n              required: true\n            })), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 8\n            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"label\", {\n              className: `${labelProperties} h-[4.8rem] rounded-r-[2rem] w-1/2 text-center p-[1.2rem] inline-block relative border border-l-0 cursor-pointer after:-left-full after:border-l-0`,\n              htmlFor: \"female\",\n              children: \"\\uC5EC\\uC131\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 8\n            }, undefined)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 7\n          }, undefined)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 6\n        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n          className: \"mt-[1.6rem]\",\n          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"span\", {\n            children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"input\", _objectSpread(_objectSpread({\n              className: \"hidden peer\",\n              type: \"radio\",\n              id: \"trainer\",\n              value: \"trainer\",\n              defaultChecked: true\n            }, register('loginType', {\n              required: true\n            })), {}, {\n              onClick: () => setAreYouTrainer(true)\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 8\n            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"label\", {\n              className: `${labelProperties} h-[4.8rem] rounded-l-[2rem] w-1/2 text-center p-[1.2rem] inline-block relative border border-r-0 cursor-pointer after:left-full`,\n              htmlFor: \"trainer\",\n              children: \"\\uD2B8\\uB808\\uC774\\uB108\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 8\n            }, undefined)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 7\n          }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"span\", {\n            children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"input\", _objectSpread(_objectSpread({\n              className: \"hidden peer\",\n              type: \"radio\",\n              id: \"user\",\n              value: \"user\"\n            }, register('loginType', {\n              required: true\n            })), {}, {\n              onClick: () => setAreYouTrainer(false)\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 8\n            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"label\", {\n              className: `${labelProperties} h-[4.8rem] rounded-r-[2rem] w-1/2 text-center p-[1.2rem] inline-block relative border border-l-0 cursor-pointer after:-left-full`,\n              htmlFor: \"user\",\n              children: \"\\uD68C\\uC6D0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 8\n            }, undefined)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 7\n          }, undefined)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 6\n        }, undefined), areYouTrainer ? /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n          className: \"flex flex-col mt-[1.6rem]\",\n          children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n            className: \"grid grid-cols-3 gap-[1.2rem]\",\n            children: interestedTypes.map(type => {\n              return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)((react__WEBPACK_IMPORTED_MODULE_2___default().Fragment), {\n                children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"span\", {\n                  className: `py-[0.8rem] px-[2rem] border rounded-[2rem] text-[1.6rem] text-center ${interestedTypes[type.id].status ? 'bg-[#FDAD00]' : ''}`,\n                  \"data-id\": type.id,\n                  onClick: e => {\n                    if (e !== null && e.target instanceof HTMLElement) {\n                      const idx = Number(e.target.dataset.id);\n\n                      if (interestedTypes[idx].status) {\n                        setInterestedTypes(interestedTypes.map(type => {\n                          if (type.id === idx) {\n                            type.status = false;\n                          }\n\n                          return type;\n                        }));\n                      } else {\n                        setInterestedTypes(interestedTypes.map(type => {\n                          if (type.id === idx) {\n                            type.status = true;\n                          }\n\n                          return type;\n                        }));\n                      }\n                    }\n                  },\n                  children: type.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 304,\n                  columnNumber: 12\n                }, undefined)\n              }, type.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 303,\n                columnNumber: 11\n              }, undefined);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 8\n          }, undefined)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 7\n        }, undefined) : /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.Fragment, {\n          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n            className: \"mt-[1.6rem]\",\n            children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"label\", {\n              children: \"\\uC0DD\\uB144\\uC6D4\\uC77C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 9\n            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"input\", _objectSpread({\n              className: \"w-full p-[1.2rem] mt-[0.4rem] border shadow-md h-[4.8rem] rounded-[2rem]\",\n              type: \"date\"\n            }, register('birthDate', {\n              required: true\n            })), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 9\n            }, undefined)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 8\n          }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n            className: \"mt-[1.6rem]\",\n            children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"label\", {\n              children: \"\\uD734\\uB300\\uD3F0 \\uBC88\\uD638\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 9\n            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"input\", _objectSpread({\n              className: \"w-full p-[1.2rem] mt-[0.4rem] border shadow-md h-[4.8rem] rounded-[2rem]\",\n              type: \"text\"\n            }, register('phoneNumber', {\n              required: true,\n              pattern: /^01([0|1|6|7|8|9])([0-9]{3,4})([0-9]{4})$/\n            })), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 9\n            }, undefined), errors.phoneNumber && /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n              className: \"text-[16px] text-red-500 mt-[0.4rem] text-center\",\n              children: \"\\uBD99\\uC784\\uD45C(-)\\uB294 \\uC81C\\uC678\\uD558\\uACE0 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 10\n            }, undefined)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 8\n          }, undefined)]\n        }, void 0, true), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n          className: \"flex items-center mt-[1.6rem]\",\n          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"input\", {\n            className: \"mr-[0.4rem]\",\n            type: \"checkbox\",\n            onChange: e => {\n              setCheckedPersonalInfo(e.target.checked);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 7\n          }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"p\", {\n            className: \"underline\",\n            onClick: () => {\n              (0,_graphql_vars__WEBPACK_IMPORTED_MODULE_6__.modalVar)(true);\n            },\n            children: \"\\uAC1C\\uC778\\uC815\\uBCF4 \\uC218\\uC9D1 \\uBC0F \\uC774\\uC6A9\\uB3D9\\uC758 (\\uD544\\uC218)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 7\n          }, undefined)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 6\n        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"input\", {\n          className: `w-full h-[4.8rem] mt-[1.6rem] text-black bg-[#FDAD00] cursor-pointer disabled:opacity-50 rounded-[2rem]`,\n          value: \"\\uD68C\\uC6D0\\uAC00\\uC785\",\n          type: \"submit\",\n          disabled: checkedPersonalInfo ? false : true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 6\n        }, undefined)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 5\n      }, undefined)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 4\n    }, undefined), modal ? /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n      className: \"fixed bottom-0 right-0 h-full overflow-auto\",\n      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n        className: \"fixed inset-0 -z-10 opacity-30\",\n        onClick: () => (0,_graphql_vars__WEBPACK_IMPORTED_MODULE_6__.modalVar)(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 6\n      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n        className: \"flex flex-col p-[2rem] text-[1.4rem] bg-white z-10\",\n        children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n          className: \"text-left text-[2.4rem] font-bold\",\n          children: \"Bodysign \\uAC1C\\uC778\\uC815\\uBCF4\\uCC98\\uB9AC\\uBC29\\uCE68\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 7\n        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n          className: \"mt-[1.6rem]\",\n          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n            className: \"font-semibold bg-gray-100\",\n            children: \"\\uBAA9\\uC801\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 8\n          }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n            className: \"mt-[0.4rem]\",\n            children: [`<Bodysign>`, \" (\\uC774\\uD558 \\\"\\uC11C\\uBE44\\uC2A4\\\"\\uB77C \\uD569\\uB2C8\\uB2E4.)\\uACFC \\uAD00\\uB828\\uD558\\uC5EC, \\uC11C\\uBE44\\uC2A4\\uC640 \\uC774\\uC6A9 \\uACE0\\uAC1D \\uAC04\\uC5D0 \\uC11C\\uBE44\\uC2A4\\uC758 \\uC774\\uC6A9\\uC870\\uAC74 \\uBC0F \\uC808\\uCC28, \\uC11C\\uBE44\\uC2A4\\uC640 \\uD68C\\uC6D0 \\uAC04\\uC758 \\uAD8C\\uB9AC, \\uC758\\uBB34 \\uBC0F \\uAE30\\uD0C0 \\uD544\\uC694\\uD55C \\uC0AC\\uD56D\\uC744 \\uADDC\\uC815\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 8\n          }, undefined)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 7\n        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n          className: \"mt-[1.6rem]\",\n          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n            className: \"font-semibold bg-gray-100\",\n            children: \"\\uCC98\\uB9AC \\uBC0F \\uBCF4\\uC720\\uAE30\\uAC04\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 8\n          }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n            className: \"mt-[0.4rem]\",\n            children: [`<Bodysign>`, \"\\uC740 \\uBC95\\uB839\\uC5D0 \\uB530\\uB978 \\uAC1C\\uC778\\uC815\\uBCF4 \\uBCF4\\uC720 \\uC774\\uC6A9\\uAE30\\uAC04 \\uB610\\uB294 \\uC815\\uBCF4\\uC8FC\\uCCB4\\uB85C\\uBD80\\uD130 \\uAC1C\\uC778\\uC815\\uBCF4\\uB97C \\uC218\\uC9D1 \\uC2DC\\uC5D0 \\uB3D9\\uC758\\uBC1B\\uC740 \\uAC1C\\uC778\\uC815\\uBCF4 \\uBCF4\\uC720 \\uC774\\uC6A9\\uAE30\\uAC04 \\uB0B4\\uC5D0\\uC11C \\uAC1C\\uC778\\uC815\\uBCF4\\uB97C \\uCC98\\uB9AC \\uBCF4\\uC720 (\\uC11C\\uBE44\\uC2A4 \\uC885\\uB8CC\\uC2DC\\uAE4C\\uC9C0)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 8\n          }, undefined)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 7\n        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n          className: \"mt-[1.6rem]\",\n          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n            className: \"font-semibold bg-gray-100\",\n            children: \"\\uAC1C\\uC778\\uC815\\uBCF4 \\uD30C\\uAE30\\uC808\\uCC28 \\uBC0F \\uD30C\\uAE30\\uBC29\\uBC95\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 8\n          }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n            className: \"mt-[0.4rem]\",\n            children: [`<Bodysign>`, \"\\uC740 \\uAC1C\\uC778\\uC815\\uBCF4 \\uBCF4\\uC720\\uAE30\\uAC04\\uC758 \\uACBD\\uACFC, \\uCC98\\uB9AC\\uBAA9\\uC801 \\uB2EC\\uC131 \\uB4F1 \\uAC1C\\uC778\\uC815\\uBCF4\\uAC00 \\uBD88\\uD544\\uC694\\uD558\\uAC8C \\uB418\\uC5C8\\uC744 \\uB54C\\uC5D0\\uB294 \\uC9C0\\uCCB4\\uC5C6\\uC774 \\uD574\\uB2F9 \\uAC1C\\uC778\\uC815\\uBCF4\\uB97C \\uD30C\\uAE30( \", `<Bodysign>`, \"\\uC740 \\uC804\\uC790\\uC801 \\uD30C\\uC77C \\uD615\\uD0DC\\uB864 \\uAE30\\uB85D \\uC800\\uC7A5\\uB41C \\uAC1C\\uC778\\uC815\\uBCF4\\uB294 \\uAE30\\uB85D\\uC744 \\uC7AC\\uC0DD\\uD560 \\uC218 \\uC5C6\\uB3C4\\uB85D \\uD30C\\uAE30)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 8\n          }, undefined)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 7\n        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n          className: \"mt-[1.6rem]\",\n          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n            className: \"font-semibold bg-gray-100\",\n            children: \"\\uAC1C\\uC778\\uC815\\uBCF4 \\uAD8C\\uB9AC & \\uC758\\uBB34 \\uD589\\uC0AC\\uBC29\\uBC95\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 8\n          }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n            className: \"mt-[0.4rem]\",\n            children: [\"\\uC815\\uBCF4 \\uC8FC\\uCCB4\\uB294 \", `<Bodysign>`, \"\\uC5D0 \\uB300\\uD574 \\uC5B8\\uC81C\\uB4E0\\uC9C0 \\uAC1C\\uC778\\uC815\\uBCF4 \\uC5F4\\uB78C \\uC815\\uC815 \\uC0AD\\uC81C \\uCC98\\uB9AC\\uC815\\uC9C0 \\uC694\\uAD6C \\uB4F1\\uC758 \\uAD8C\\uB9AC \\uD589\\uC0AC \\uAC00\\uB2A5\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 8\n          }, undefined)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 7\n        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n          className: \"mt-[1.6rem]\",\n          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n            className: \"font-semibold bg-gray-100\",\n            children: \"\\uAC1C\\uC778\\uC815\\uBCF4 \\uBCF4\\uD638\\uCC45\\uC784\\uC790\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 8\n          }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n            className: \"mt-[0.4rem]\",\n            children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"p\", {\n              children: \"\\uC131\\uBA85 : \\uAE40\\uCC3D\\uB3D9\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 9\n            }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"p\", {\n              children: \"\\uC5F0\\uB77D\\uCC98 : 010-7204-6072\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 9\n            }, undefined)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 8\n          }, undefined)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 7\n        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n          className: \"mt-[1.6rem]\",\n          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n            className: \"font-semibold bg-gray-100\",\n            children: \"\\uAC1C\\uC778\\uC815\\uBCF4 \\uCC98\\uB9AC\\uD56D\\uBAA9\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 8\n          }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n            className: \"mt-[0.4rem]\",\n            children: \"\\uC774\\uBA54\\uC77C, \\uBE44\\uBC00\\uBC88\\uD638, \\uC774\\uB984, \\uC0DD\\uB144\\uC6D4\\uC77C, \\uC804\\uD654\\uBC88\\uD638, \\uADFC\\uBB34\\uD658\\uACBD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 8\n          }, undefined)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 7\n        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n          className: \"mt-[1.6rem]\",\n          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n            className: \"font-semibold bg-gray-100\",\n            children: \"\\uC548\\uC815\\uC131 \\uD655\\uBCF4\\uC870\\uCE58\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 8\n          }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n            className: \"mt-[0.4rem]\",\n            children: \"\\uAC1C\\uC778\\uC815\\uBCF4 \\uCC98\\uB9AC\\uC2DC\\uC2A4\\uD15C \\uB4F1\\uC758 \\uC811\\uADFC\\uAD8C\\uD55C \\uAD00\\uB9AC, \\uACE0\\uC720\\uC2DD\\uBCC4\\uBC88\\uD638 \\uB4F1\\uC758 \\uC554\\uD638\\uD654\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 8\n          }, undefined)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 7\n        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n          className: \"mt-[1.6rem]\",\n          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n            className: \"font-semibold bg-gray-100\",\n            children: \"\\uAC1C\\uC778\\uC815\\uBCF4 \\uCC98\\uB9AC\\uBC29\\uCE68 \\uBCC0\\uACBD\\uC0AC\\uD56D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 8\n          }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n            className: \"mt-[0.4rem]\",\n            children: \"\\uAC1C\\uC778\\uC815\\uBCF4 \\uCC98\\uB9AC \\uBC29\\uCE68\\uC740 2021.12.21 \\uBD80\\uD130 \\uC2DC\\uD589\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 8\n          }, undefined)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 7\n        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n          className: \"mt-[1.6rem]\",\n          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n            className: \"font-semibold bg-gray-100\",\n            children: \"\\uAC1C\\uC778\\uC815\\uBCF4\\uC758 \\uC5F4\\uB78C\\uCCAD\\uAD6C\\uB97C \\uC811\\uC218 \\uBC0F \\uCC98\\uB9AC\\uD558\\uB294 \\uBD80\\uC11C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 8\n          }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n            className: \"mt-[0.4rem]\",\n            children: \"\\uAC1C\\uC778\\uC815\\uBCF4 \\uBCF4\\uD638\\uCC45\\uC784\\uC790\\uC640 \\uB3D9\\uC77C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 8\n          }, undefined)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 7\n        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n          className: \"mt-[1.6rem]\",\n          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n            className: \"font-semibold bg-gray-100\",\n            children: \"\\uC815\\uBCF4\\uC8FC\\uCCB4\\uC758 \\uAD8C\\uC775\\uCE68\\uD574\\uC5D0 \\uB300\\uD55C \\uAD6C\\uC81C\\uBC29\\uBC95\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 8\n          }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"div\", {\n            className: \"mt-[0.4rem]\",\n            children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"ul\", {\n              className: \"ml-[1.6rem] list-decimal\",\n              children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"li\", {\n                children: \"\\uAC1C\\uC778\\uC815\\uBCF4\\uBD84\\uC7C1\\uC870\\uC815\\uC704\\uC6D0\\uD68C : (\\uAD6D\\uBC88\\uC5C6\\uC774) 1833-6972 (www.kopico.go.kr)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 506,\n                columnNumber: 10\n              }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"li\", {\n                children: \"\\uAC1C\\uC778\\uC815\\uBCF4\\uCE68\\uD574\\uC2E0\\uACE0\\uC13C\\uD130 : (\\uAD6D\\uBC88\\uC5C6\\uC774) 118 (privacy.kisa.or.kr)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 510,\n                columnNumber: 10\n              }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"li\", {\n                children: \"\\uB300\\uAC80\\uCC30\\uCCAD : (\\uAD6D\\uBC88\\uC5C6\\uC774) 1301 (ww.spo.go.kr)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 514,\n                columnNumber: 10\n              }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"li\", {\n                children: \"\\uACBD\\uCC30\\uCCAD : (\\uAD6D\\uBC88\\uC5C6\\uC774) 182 (cyberbureau.police.go.kr)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 515,\n                columnNumber: 10\n              }, undefined)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 505,\n              columnNumber: 9\n            }, undefined)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 8\n          }, undefined)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 7\n        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxDEV)(\"button\", {\n          className: \"w-full h-[4.8rem] mt-[1.6rem] p-[1.2rem] text-black bg-[#FDAD00] cursor-pointer shadow-md rounded-[2rem]\",\n          type: \"submit\",\n          onClick: () => (0,_graphql_vars__WEBPACK_IMPORTED_MODULE_6__.modalVar)(false),\n          children: \"\\uD655\\uC778\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 7\n        }, undefined)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 6\n      }, undefined)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 5\n    }, undefined) : null]\n  }, void 0, true);\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Signup);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pages/signup.tsx\n");

/***/ }),

/***/ "./node_modules/react-datepicker/dist/react-datepicker.css":
/*!*****************************************************************!*\
  !*** ./node_modules/react-datepicker/dist/react-datepicker.css ***!
  \*****************************************************************/
/***/ (() => {



/***/ }),

/***/ "./node_modules/next/dist/lib/is-error.js":
/*!************************************************!*\
  !*** ./node_modules/next/dist/lib/is-error.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = isError;\nfunction isError(err) {\n    return typeof err === 'object' && err !== null && 'name' in err && 'message' in err;\n}\n\n//# sourceMappingURL=is-error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2xpYi9pcy1lcnJvci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtCQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xpZW50Ly4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9saWIvaXMtZXJyb3IuanM/MTc4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzRXJyb3I7XG5mdW5jdGlvbiBpc0Vycm9yKGVycikge1xuICAgIHJldHVybiB0eXBlb2YgZXJyID09PSAnb2JqZWN0JyAmJiBlcnIgIT09IG51bGwgJiYgJ25hbWUnIGluIGVyciAmJiAnbWVzc2FnZScgaW4gZXJyO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pcy1lcnJvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/lib/is-error.js\n");

/***/ }),

/***/ "@apollo/client":
/*!*********************************!*\
  !*** external "@apollo/client" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@apollo/client");

/***/ }),

/***/ "../../../server/denormalize-page-path":
/*!************************************************************!*\
  !*** external "next/dist/server/denormalize-page-path.js" ***!
  \************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/denormalize-page-path.js");

/***/ }),

/***/ "../i18n/normalize-locale-path":
/*!*********************************************************************!*\
  !*** external "next/dist/shared/lib/i18n/normalize-locale-path.js" ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/i18n/normalize-locale-path.js");

/***/ }),

/***/ "../mitt":
/*!***********************************************!*\
  !*** external "next/dist/shared/lib/mitt.js" ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/mitt.js");

/***/ }),

/***/ "../shared/lib/router-context":
/*!*********************************************************!*\
  !*** external "next/dist/shared/lib/router-context.js" ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router-context.js");

/***/ }),

/***/ "../shared/lib/router/utils/get-asset-path-from-route":
/*!*********************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/get-asset-path-from-route.js" ***!
  \*********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/get-asset-path-from-route.js");

/***/ }),

/***/ "./utils/get-middleware-regex":
/*!****************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/get-middleware-regex.js" ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/get-middleware-regex.js");

/***/ }),

/***/ "./utils/is-dynamic":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/is-dynamic.js" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/is-dynamic.js");

/***/ }),

/***/ "./utils/parse-relative-url":
/*!**************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/parse-relative-url.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/parse-relative-url.js");

/***/ }),

/***/ "./utils/querystring":
/*!*******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/querystring.js" ***!
  \*******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/querystring.js");

/***/ }),

/***/ "./utils/resolve-rewrites":
/*!************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/resolve-rewrites.js" ***!
  \************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/resolve-rewrites.js");

/***/ }),

/***/ "./utils/route-matcher":
/*!*********************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/route-matcher.js" ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/route-matcher.js");

/***/ }),

/***/ "./utils/route-regex":
/*!*******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/route-regex.js" ***!
  \*******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/route-regex.js");

/***/ }),

/***/ "../shared/lib/utils":
/*!************************************************!*\
  !*** external "next/dist/shared/lib/utils.js" ***!
  \************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/utils.js");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("react");

/***/ }),

/***/ "react-hook-form":
/*!**********************************!*\
  !*** external "react-hook-form" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("react-hook-form");

/***/ }),

/***/ "react-is":
/*!***************************!*\
  !*** external "react-is" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("react-is");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-dev-runtime");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./src/pages/signup.tsx"));
module.exports = __webpack_exports__;

})();