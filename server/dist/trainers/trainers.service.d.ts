import { Repository } from 'typeorm';
import { CreateTrainerInput } from './dto/create-trainer.input';
import { UpdateTrainerInput } from './dto/update-trainer.input';
import { Trainer } from './entities/trainer.entity';
import { UsersService } from 'src/users/users.service';
import { SessionsService } from 'src/sessions/sessions.service';
import { ExerciseCategoriesService } from 'src/exercise-categories/exercise-categories.service';
import { Session } from 'src/sessions/entities/session.entity';
import { ExerciseCategory } from 'src/exercise-categories/entities/exercise-category.entity';
import { NonRegisteredUser } from 'src/non-registered-users/entities/non-registered-user.entity';
import { NonRegisteredUsersService } from 'src/non-registered-users/non-registered-users.service';
import { UpdatePasswordTrainerInput } from './dto/updatePassword-trainer.input';
import { UserCategory } from 'src/user-categories/entities/user-category.entity';
import { UserCategoriesService } from 'src/user-categories/user-categories.service';
import { User } from 'src/users/entities/user.entity';
import { SessionHistory } from 'src/session-histories/entities/session-history.entity';
import { SessionHistoriesService } from 'src/session-histories/session-histories.service';
import { CreateSocialTrainerInput } from './dto/create-socialTrainer.input';
import { TrainerInterestService } from 'src/trainer-interest/trainer-interest.service';
import { TrainerInterest } from 'src/trainer-interest/entities/trainerInterest.entity';
import { RefreshTokenService } from 'src/refresh-tokens/refresh-tokens.service';
export declare class TrainersService {
    private trainersRepository;
    private usersService;
    private sessionsService;
    private exerciseCategoriesService;
    private nonRegisteredUsersService;
    private userCategoriesService;
    private sessionHistoriesService;
    private trainerInterestService;
    private refreshTokensService;
    constructor(trainersRepository: Repository<Trainer>, usersService: UsersService, sessionsService: SessionsService, exerciseCategoriesService: ExerciseCategoriesService, nonRegisteredUsersService: NonRegisteredUsersService, userCategoriesService: UserCategoriesService, sessionHistoriesService: SessionHistoriesService, trainerInterestService: TrainerInterestService, refreshTokensService: RefreshTokenService);
    create(createTrainerInput: CreateTrainerInput): Promise<Omit<Trainer, 'password' | 'dbPasswordSalt'>>;
    createSocialTrainer(createSocialTrainerInput: CreateSocialTrainerInput): Promise<Trainer>;
    findAll(): Promise<Trainer[]>;
    findOneById(id: number): Promise<Trainer>;
    findOneByEmail(email: string): Promise<Trainer>;
    findOneUserByPhoneNumber(phoneNumber: string): Promise<User | undefined>;
    findAllUsers(id: number): Promise<User[]>;
    findAllSessionsByTrainerId(trainerId: number): Promise<Session[]>;
    findAllExerciseCategoriesByTrainerId(trainerId: number): Promise<ExerciseCategory[]>;
    findAllNonRegisteredUsersByTrainerId(trainerId: number): Promise<NonRegisteredUser[]>;
    findAllUserCategoriesByTrainerId(trainerId: number): Promise<UserCategory[]>;
    findAllSessionHistoriesByTrainerId(trainerId: number): Promise<SessionHistory[]>;
    findAllTrainerInterestsByTrainerId(trainerId: number): Promise<TrainerInterest[]>;
    update(updateTrainerInput: UpdateTrainerInput): Promise<Trainer>;
    updatePasswordTrainer(updatePasswordTrainerInput: UpdatePasswordTrainerInput): Promise<Omit<Trainer, 'password' | 'dbPasswordSalt'>>;
    remove(id: number): Promise<Trainer>;
    findPasswordByEmailUsingQueryBuilder(email: string): Promise<any>;
    canMutate(currentUser: User | Trainer, id: number): Promise<boolean>;
}
