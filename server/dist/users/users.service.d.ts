import { Repository } from 'typeorm';
import { CreateUserInput } from './dto/create-user.input';
import { UpdateUserInput } from './dto/update-user.input';
import { User } from './entities/user.entity';
import { TrainersService } from 'src/trainers/trainers.service';
import { SessionsService } from 'src/sessions/sessions.service';
import { InbodiesService } from 'src/inbodies/inbodies.service';
import { Inbody } from 'src/inbodies/entities/inbody.entity';
import { SessionHistory } from 'src/session-histories/entities/session-history.entity';
import { SessionHistoriesService } from 'src/session-histories/session-histories.service';
import { UpdatePasswordUserInput } from './dto/updatePassword-user.input';
import { Session } from 'src/sessions/entities/session.entity';
import { CreateSocialUserInput } from './dto/create-socialUser.input';
import { Trainer } from 'src/trainers/entities/trainer.entity';
export declare class UsersService {
    private usersRepository;
    private trainersService;
    private sessionsService;
    private inbodiesService;
    private sessionHistoriesService;
    constructor(usersRepository: Repository<User>, trainersService: TrainersService, sessionsService: SessionsService, inbodiesService: InbodiesService, sessionHistoriesService: SessionHistoriesService);
    create(createUserInput: CreateUserInput): Promise<Omit<User, 'password' | 'dbPasswordSalt'>>;
    createSocialUser(createSocialUserInput: CreateSocialUserInput): Promise<User>;
    findAll(): Promise<User[]>;
    findOneById(id: number): Promise<User>;
    findOneByEmail(email: string): Promise<User>;
    findOneByPhoneNumber(trainerId: number | null, phoneNumber: string): Promise<User | undefined>;
    findAllByTrainerId(trainerId: number): Promise<User[]>;
    findAllSessionsByUserId(userId: number): Promise<Session[]>;
    findAllByUserCategoryId(userCategoryId: number): Promise<User[]>;
    findAllInbodiesByUserId(userId: number): Promise<Inbody[]>;
    findAllSessionHistoriesByUserId(userId: number): Promise<SessionHistory[]>;
    update(updateUserInput: UpdateUserInput): Promise<User>;
    updatePasswordUser(updatePasswordUserInput: UpdatePasswordUserInput): Promise<Omit<User, 'password' | 'dbPasswordSalt'>>;
    remove(id: number): Promise<User>;
    removeTrainerId(id: number): Promise<User>;
    bulkRemoveTrainerId(trainerId: number, ids: number[]): Promise<User[]>;
    findPasswordByEmailUsingQueryBuilder(email: string): Promise<any>;
    canMutate(currentUser: User | Trainer, id: number): Promise<boolean>;
}
